
MasterBoardCANTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027f4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002900  08002900  00003900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800292c  0800292c  00004014  2**0
                  CONTENTS
  4 .ARM          00000000  0800292c  0800292c  00004014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800292c  0800292c  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800292c  0800292c  0000392c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002930  08002930  00003930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08002934  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000014  08002948  00004014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08002948  00004110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f42  00000000  00000000  0000403d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001831  00000000  00000000  0000af7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  0000c7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000595  00000000  00000000  0000cf38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016513  00000000  00000000  0000d4cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000082f3  00000000  00000000  000239e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000804ce  00000000  00000000  0002bcd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ac1a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d88  00000000  00000000  000ac1e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000adf6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	080028e8 	.word	0x080028e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	080028e8 	.word	0x080028e8

0800014c <CAN_Update_Error_Counters>:
uint8_t can_tx_error_counter = 0;
uint8_t can_rx_error_counter = 0;
uint32_t can_last_error_code = 0;

void CAN_Update_Error_Counters(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
    // Read the CAN Error Status Register (ESR)
    uint32_t esr = READ_REG(hcan.Instance->ESR);
 8000152:	4b13      	ldr	r3, [pc, #76]	@ (80001a0 <CAN_Update_Error_Counters+0x54>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	699b      	ldr	r3, [r3, #24]
 8000158:	607b      	str	r3, [r7, #4]
    
    // Extract TX and RX error counters
    can_tx_error_counter = (uint8_t)((esr & CAN_ESR_TEC) >> CAN_ESR_TEC_Pos);
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	0c1b      	lsrs	r3, r3, #16
 800015e:	b2da      	uxtb	r2, r3
 8000160:	4b10      	ldr	r3, [pc, #64]	@ (80001a4 <CAN_Update_Error_Counters+0x58>)
 8000162:	701a      	strb	r2, [r3, #0]
    can_rx_error_counter = (uint8_t)((esr & CAN_ESR_REC) >> CAN_ESR_REC_Pos);
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	0e1b      	lsrs	r3, r3, #24
 8000168:	b2da      	uxtb	r2, r3
 800016a:	4b0f      	ldr	r3, [pc, #60]	@ (80001a8 <CAN_Update_Error_Counters+0x5c>)
 800016c:	701a      	strb	r2, [r3, #0]
    
    // Store the last error code
    can_last_error_code = (esr & CAN_ESR_LEC);
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000174:	4a0d      	ldr	r2, [pc, #52]	@ (80001ac <CAN_Update_Error_Counters+0x60>)
 8000176:	6013      	str	r3, [r2, #0]
    
    // Check for error conditions
    if (can_tx_error_counter > 127 || can_rx_error_counter > 127) {
 8000178:	4b0a      	ldr	r3, [pc, #40]	@ (80001a4 <CAN_Update_Error_Counters+0x58>)
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	b25b      	sxtb	r3, r3
 800017e:	2b00      	cmp	r3, #0
 8000180:	db04      	blt.n	800018c <CAN_Update_Error_Counters+0x40>
 8000182:	4b09      	ldr	r3, [pc, #36]	@ (80001a8 <CAN_Update_Error_Counters+0x5c>)
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	b25b      	sxtb	r3, r3
 8000188:	2b00      	cmp	r3, #0
 800018a:	da04      	bge.n	8000196 <CAN_Update_Error_Counters+0x4a>
        errorCounter++;  // Increment global error counter if either counter exceeds warning level
 800018c:	4b08      	ldr	r3, [pc, #32]	@ (80001b0 <CAN_Update_Error_Counters+0x64>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	3301      	adds	r3, #1
 8000192:	4a07      	ldr	r2, [pc, #28]	@ (80001b0 <CAN_Update_Error_Counters+0x64>)
 8000194:	6013      	str	r3, [r2, #0]
    }
}
 8000196:	bf00      	nop
 8000198:	370c      	adds	r7, #12
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	20000084 	.word	0x20000084
 80001a8:	20000085 	.word	0x20000085
 80001ac:	20000088 	.word	0x20000088
 80001b0:	2000006c 	.word	0x2000006c

080001b4 <CAN_Calculate_Baud_Rate>:

uint32_t CAN_Calculate_Baud_Rate(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af00      	add	r7, sp, #0
    uint32_t pclk1 = HAL_RCC_GetPCLK1Freq();
 80001ba:	f002 f8b5 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
 80001be:	6178      	str	r0, [r7, #20]
    uint32_t prescaler = hcan.Init.Prescaler;
 80001c0:	4b12      	ldr	r3, [pc, #72]	@ (800020c <CAN_Calculate_Baud_Rate+0x58>)
 80001c2:	685b      	ldr	r3, [r3, #4]
 80001c4:	613b      	str	r3, [r7, #16]
    uint32_t bs1 = ((hcan.Init.TimeSeg1 >> 16) & 0x0F) + 1;  // Convert BS1 value to actual TQ
 80001c6:	4b11      	ldr	r3, [pc, #68]	@ (800020c <CAN_Calculate_Baud_Rate+0x58>)
 80001c8:	691b      	ldr	r3, [r3, #16]
 80001ca:	0c1b      	lsrs	r3, r3, #16
 80001cc:	f003 030f 	and.w	r3, r3, #15
 80001d0:	3301      	adds	r3, #1
 80001d2:	60fb      	str	r3, [r7, #12]
    uint32_t bs2 = ((hcan.Init.TimeSeg2 >> 20) & 0x07) + 1;  // Convert BS2 value to actual TQ
 80001d4:	4b0d      	ldr	r3, [pc, #52]	@ (800020c <CAN_Calculate_Baud_Rate+0x58>)
 80001d6:	695b      	ldr	r3, [r3, #20]
 80001d8:	0d1b      	lsrs	r3, r3, #20
 80001da:	f003 0307 	and.w	r3, r3, #7
 80001de:	3301      	adds	r3, #1
 80001e0:	60bb      	str	r3, [r7, #8]
    uint32_t total_tq = 1 + bs1 + bs2;  // 1 is for sync segment
 80001e2:	68fa      	ldr	r2, [r7, #12]
 80001e4:	68bb      	ldr	r3, [r7, #8]
 80001e6:	4413      	add	r3, r2
 80001e8:	3301      	adds	r3, #1
 80001ea:	607b      	str	r3, [r7, #4]
    
    // Calculate baud rate: PCLK1 / (prescaler * total_tq)
    current_baud_rate = pclk1 / (prescaler * total_tq);
 80001ec:	693b      	ldr	r3, [r7, #16]
 80001ee:	687a      	ldr	r2, [r7, #4]
 80001f0:	fb02 f303 	mul.w	r3, r2, r3
 80001f4:	697a      	ldr	r2, [r7, #20]
 80001f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80001fa:	4a05      	ldr	r2, [pc, #20]	@ (8000210 <CAN_Calculate_Baud_Rate+0x5c>)
 80001fc:	6013      	str	r3, [r2, #0]
    
    return current_baud_rate;
 80001fe:	4b04      	ldr	r3, [pc, #16]	@ (8000210 <CAN_Calculate_Baud_Rate+0x5c>)
 8000200:	681b      	ldr	r3, [r3, #0]
}
 8000202:	4618      	mov	r0, r3
 8000204:	3718      	adds	r7, #24
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	2000008c 	.word	0x2000008c
 8000210:	2000007c 	.word	0x2000007c

08000214 <MX_CAN_Init>:

void MX_CAN_Init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b08a      	sub	sp, #40	@ 0x28
 8000218:	af00      	add	r7, sp, #0
    /* USER CODE END CAN_Init 0 */

    /* USER CODE BEGIN CAN_Init 1 */

    /* USER CODE END CAN_Init 1 */
    hcan.Instance = CAN1;
 800021a:	4b27      	ldr	r3, [pc, #156]	@ (80002b8 <MX_CAN_Init+0xa4>)
 800021c:	4a27      	ldr	r2, [pc, #156]	@ (80002bc <MX_CAN_Init+0xa8>)
 800021e:	601a      	str	r2, [r3, #0]
    hcan.Init.Prescaler = 9;
 8000220:	4b25      	ldr	r3, [pc, #148]	@ (80002b8 <MX_CAN_Init+0xa4>)
 8000222:	2209      	movs	r2, #9
 8000224:	605a      	str	r2, [r3, #4]
    hcan.Init.Mode = CAN_MODE_NORMAL;
 8000226:	4b24      	ldr	r3, [pc, #144]	@ (80002b8 <MX_CAN_Init+0xa4>)
 8000228:	2200      	movs	r2, #0
 800022a:	609a      	str	r2, [r3, #8]
    hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800022c:	4b22      	ldr	r3, [pc, #136]	@ (80002b8 <MX_CAN_Init+0xa4>)
 800022e:	2200      	movs	r2, #0
 8000230:	60da      	str	r2, [r3, #12]
    hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000232:	4b21      	ldr	r3, [pc, #132]	@ (80002b8 <MX_CAN_Init+0xa4>)
 8000234:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000238:	611a      	str	r2, [r3, #16]
    hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800023a:	4b1f      	ldr	r3, [pc, #124]	@ (80002b8 <MX_CAN_Init+0xa4>)
 800023c:	2200      	movs	r2, #0
 800023e:	615a      	str	r2, [r3, #20]
    hcan.Init.TimeTriggeredMode = DISABLE;
 8000240:	4b1d      	ldr	r3, [pc, #116]	@ (80002b8 <MX_CAN_Init+0xa4>)
 8000242:	2200      	movs	r2, #0
 8000244:	761a      	strb	r2, [r3, #24]
    hcan.Init.AutoBusOff = DISABLE;
 8000246:	4b1c      	ldr	r3, [pc, #112]	@ (80002b8 <MX_CAN_Init+0xa4>)
 8000248:	2200      	movs	r2, #0
 800024a:	765a      	strb	r2, [r3, #25]
    hcan.Init.AutoWakeUp = DISABLE;
 800024c:	4b1a      	ldr	r3, [pc, #104]	@ (80002b8 <MX_CAN_Init+0xa4>)
 800024e:	2200      	movs	r2, #0
 8000250:	769a      	strb	r2, [r3, #26]
    hcan.Init.AutoRetransmission = DISABLE;
 8000252:	4b19      	ldr	r3, [pc, #100]	@ (80002b8 <MX_CAN_Init+0xa4>)
 8000254:	2200      	movs	r2, #0
 8000256:	76da      	strb	r2, [r3, #27]
    hcan.Init.ReceiveFifoLocked = DISABLE;
 8000258:	4b17      	ldr	r3, [pc, #92]	@ (80002b8 <MX_CAN_Init+0xa4>)
 800025a:	2200      	movs	r2, #0
 800025c:	771a      	strb	r2, [r3, #28]
    hcan.Init.TransmitFifoPriority = DISABLE;
 800025e:	4b16      	ldr	r3, [pc, #88]	@ (80002b8 <MX_CAN_Init+0xa4>)
 8000260:	2200      	movs	r2, #0
 8000262:	775a      	strb	r2, [r3, #29]
    
    if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000264:	4814      	ldr	r0, [pc, #80]	@ (80002b8 <MX_CAN_Init+0xa4>)
 8000266:	f000 fbb1 	bl	80009cc <HAL_CAN_Init>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <MX_CAN_Init+0x60>
    {
        Error_Handler();
 8000270:	f000 f9ec 	bl	800064c <Error_Handler>
    }
    
    /* USER CODE BEGIN CAN_Init 2 */
    CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000274:	2301      	movs	r3, #1
 8000276:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones
 8000278:	2300      	movs	r3, #0
 800027a:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800027c:	2301      	movs	r3, #1
 800027e:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0x0000;
 8000280:	2300      	movs	r3, #0
 8000282:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0x0000;
 8000284:	2300      	movs	r3, #0
 8000286:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0x0000;  // Accept all IDs
 8000288:	2300      	movs	r3, #0
 800028a:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;   // Accept all IDs
 800028c:	2300      	movs	r3, #0
 800028e:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000290:	2300      	movs	r3, #0
 8000292:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000294:	2301      	movs	r3, #1
 8000296:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 14;  // CAN1 has all filter banks
 8000298:	230e      	movs	r3, #14
 800029a:	627b      	str	r3, [r7, #36]	@ 0x24

    if (HAL_CAN_ConfigFilter(&hcan, &canfilterconfig) != HAL_OK)
 800029c:	463b      	mov	r3, r7
 800029e:	4619      	mov	r1, r3
 80002a0:	4805      	ldr	r0, [pc, #20]	@ (80002b8 <MX_CAN_Init+0xa4>)
 80002a2:	f000 fc8e 	bl	8000bc2 <HAL_CAN_ConfigFilter>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_CAN_Init+0x9c>
    {
        Error_Handler();
 80002ac:	f000 f9ce 	bl	800064c <Error_Handler>
    }
    /* USER CODE END CAN_Init 2 */
}
 80002b0:	bf00      	nop
 80002b2:	3728      	adds	r7, #40	@ 0x28
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	2000008c 	.word	0x2000008c
 80002bc:	40006400 	.word	0x40006400

080002c0 <CAN_Handler_Init>:

void CAN_Handler_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
    // Initialize CAN peripheral using MX_CAN_Init
    MX_CAN_Init();
 80002c4:	f7ff ffa6 	bl	8000214 <MX_CAN_Init>

    // Calculate and store the actual baud rate
    current_baud_rate = CAN_Calculate_Baud_Rate();
 80002c8:	f7ff ff74 	bl	80001b4 <CAN_Calculate_Baud_Rate>
 80002cc:	4603      	mov	r3, r0
 80002ce:	4a10      	ldr	r2, [pc, #64]	@ (8000310 <CAN_Handler_Init+0x50>)
 80002d0:	6013      	str	r3, [r2, #0]

    // Initialize CAN parameters
    TxHeader.DLC = 4;  // 4 bytes of data
 80002d2:	4b10      	ldr	r3, [pc, #64]	@ (8000314 <CAN_Handler_Init+0x54>)
 80002d4:	2204      	movs	r2, #4
 80002d6:	611a      	str	r2, [r3, #16]
    TxHeader.IDE = CAN_ID_STD; // Standard ID
 80002d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000314 <CAN_Handler_Init+0x54>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA; // Data frame
 80002de:	4b0d      	ldr	r3, [pc, #52]	@ (8000314 <CAN_Handler_Init+0x54>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	60da      	str	r2, [r3, #12]
    TxHeader.StdId = CAN_TX_ID; // ID 0x7E2
 80002e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000314 <CAN_Handler_Init+0x54>)
 80002e6:	f240 72e2 	movw	r2, #2018	@ 0x7e2
 80002ea:	601a      	str	r2, [r3, #0]
    
    errorCounter = 0;
 80002ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000318 <CAN_Handler_Init+0x58>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
    messageReceived = 0;
 80002f2:	4b0a      	ldr	r3, [pc, #40]	@ (800031c <CAN_Handler_Init+0x5c>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	701a      	strb	r2, [r3, #0]
    can_tx_counter = 0;
 80002f8:	4b09      	ldr	r3, [pc, #36]	@ (8000320 <CAN_Handler_Init+0x60>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
    can_msg_counter = 0;
 80002fe:	4b09      	ldr	r3, [pc, #36]	@ (8000324 <CAN_Handler_Init+0x64>)
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
    lastTxTime = 0;
 8000304:	4b08      	ldr	r3, [pc, #32]	@ (8000328 <CAN_Handler_Init+0x68>)
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	2000007c 	.word	0x2000007c
 8000314:	20000030 	.word	0x20000030
 8000318:	2000006c 	.word	0x2000006c
 800031c:	20000070 	.word	0x20000070
 8000320:	20000074 	.word	0x20000074
 8000324:	20000078 	.word	0x20000078
 8000328:	20000080 	.word	0x20000080

0800032c <CAN_Config_Filter>:

void CAN_Config_Filter(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b08a      	sub	sp, #40	@ 0x28
 8000330:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000332:	2301      	movs	r3, #1
 8000334:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones
 8000336:	2300      	movs	r3, #0
 8000338:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800033a:	2301      	movs	r3, #1
 800033c:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0x0000;
 800033e:	2300      	movs	r3, #0
 8000340:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0x0000;
 8000342:	2300      	movs	r3, #0
 8000344:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0x0000;  // Accept all IDs
 8000346:	2300      	movs	r3, #0
 8000348:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;   // Accept all IDs
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800034e:	2300      	movs	r3, #0
 8000350:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000352:	2301      	movs	r3, #1
 8000354:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 14;  // CAN1 has all filter banks
 8000356:	230e      	movs	r3, #14
 8000358:	627b      	str	r3, [r7, #36]	@ 0x24

    if(HAL_CAN_ConfigFilter(&hcan, &canfilterconfig) != HAL_OK)
 800035a:	463b      	mov	r3, r7
 800035c:	4619      	mov	r1, r3
 800035e:	4806      	ldr	r0, [pc, #24]	@ (8000378 <CAN_Config_Filter+0x4c>)
 8000360:	f000 fc2f 	bl	8000bc2 <HAL_CAN_ConfigFilter>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <CAN_Config_Filter+0x42>
    {
        Error_Handler();
 800036a:	f000 f96f 	bl	800064c <Error_Handler>
    }
}
 800036e:	bf00      	nop
 8000370:	3728      	adds	r7, #40	@ 0x28
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	2000008c 	.word	0x2000008c

0800037c <CAN_Start>:

HAL_StatusTypeDef CAN_Start(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status;
    
    // Start the CAN peripheral
    status = HAL_CAN_Start(&hcan);
 8000382:	480b      	ldr	r0, [pc, #44]	@ (80003b0 <CAN_Start+0x34>)
 8000384:	f000 fce6 	bl	8000d54 <HAL_CAN_Start>
 8000388:	4603      	mov	r3, r0
 800038a:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 800038c:	79fb      	ldrb	r3, [r7, #7]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <CAN_Start+0x1a>
    {
        return status;
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	e007      	b.n	80003a6 <CAN_Start+0x2a>
    }
    
    // Activate notifications for error states
    status = HAL_CAN_ActivateNotification(&hcan, CAN_IT_ERROR_WARNING |
 8000396:	f648 7110 	movw	r1, #36624	@ 0x8f10
 800039a:	4805      	ldr	r0, [pc, #20]	@ (80003b0 <CAN_Start+0x34>)
 800039c:	f000 ff0e 	bl	80011bc <HAL_CAN_ActivateNotification>
 80003a0:	4603      	mov	r3, r0
 80003a2:	71fb      	strb	r3, [r7, #7]
                                               CAN_IT_ERROR_PASSIVE |
                                               CAN_IT_BUSOFF |
                                               CAN_IT_LAST_ERROR_CODE |
                                               CAN_IT_ERROR |
                                               CAN_IT_RX_FIFO1_MSG_PENDING);
    return status;
 80003a4:	79fb      	ldrb	r3, [r7, #7]
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	2000008c 	.word	0x2000008c

080003b4 <CAN_Handler_Process>:

void CAN_Handler_Process(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
    // Update error counters
    CAN_Update_Error_Counters();
 80003b8:	f7ff fec8 	bl	800014c <CAN_Update_Error_Counters>
    
    // Send periodic message
    CAN_Send_Periodic_Message();
 80003bc:	f000 f802 	bl	80003c4 <CAN_Send_Periodic_Message>
}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <CAN_Send_Periodic_Message>:

void CAN_Send_Periodic_Message(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
    uint32_t currentTime = HAL_GetTick();
 80003ca:	f000 faf5 	bl	80009b8 <HAL_GetTick>
 80003ce:	6078      	str	r0, [r7, #4]
    
    // Check if it's time to send the message
    if(currentTime - lastTxTime >= CAN_TX_INTERVAL)
 80003d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000408 <CAN_Send_Periodic_Message+0x44>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	1ad3      	subs	r3, r2, r3
 80003d8:	2b63      	cmp	r3, #99	@ 0x63
 80003da:	d910      	bls.n	80003fe <CAN_Send_Periodic_Message+0x3a>
    {
        // Send the message
        if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 80003dc:	4b0b      	ldr	r3, [pc, #44]	@ (800040c <CAN_Send_Periodic_Message+0x48>)
 80003de:	4a0c      	ldr	r2, [pc, #48]	@ (8000410 <CAN_Send_Periodic_Message+0x4c>)
 80003e0:	490c      	ldr	r1, [pc, #48]	@ (8000414 <CAN_Send_Periodic_Message+0x50>)
 80003e2:	480d      	ldr	r0, [pc, #52]	@ (8000418 <CAN_Send_Periodic_Message+0x54>)
 80003e4:	f000 fcfa 	bl	8000ddc <HAL_CAN_AddTxMessage>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d107      	bne.n	80003fe <CAN_Send_Periodic_Message+0x3a>
        {
            lastTxTime = currentTime;
 80003ee:	4a06      	ldr	r2, [pc, #24]	@ (8000408 <CAN_Send_Periodic_Message+0x44>)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	6013      	str	r3, [r2, #0]
            can_tx_counter++;
 80003f4:	4b09      	ldr	r3, [pc, #36]	@ (800041c <CAN_Send_Periodic_Message+0x58>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	3301      	adds	r3, #1
 80003fa:	4a08      	ldr	r2, [pc, #32]	@ (800041c <CAN_Send_Periodic_Message+0x58>)
 80003fc:	6013      	str	r3, [r2, #0]
        }
    }
}
 80003fe:	bf00      	nop
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	20000080 	.word	0x20000080
 800040c:	20000068 	.word	0x20000068
 8000410:	20000000 	.word	0x20000000
 8000414:	20000030 	.word	0x20000030
 8000418:	2000008c 	.word	0x2000008c
 800041c:	20000074 	.word	0x20000074

08000420 <HAL_CAN_RxFifo1MsgPendingCallback>:
{
    return HAL_CAN_GetError(&hcan);
}

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData) == HAL_OK)
 8000428:	4b0a      	ldr	r3, [pc, #40]	@ (8000454 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 800042a:	4a0b      	ldr	r2, [pc, #44]	@ (8000458 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 800042c:	2101      	movs	r1, #1
 800042e:	6878      	ldr	r0, [r7, #4]
 8000430:	f000 fda3 	bl	8000f7a <HAL_CAN_GetRxMessage>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d107      	bne.n	800044a <HAL_CAN_RxFifo1MsgPendingCallback+0x2a>
    {
        messageReceived = 1;
 800043a:	4b08      	ldr	r3, [pc, #32]	@ (800045c <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 800043c:	2201      	movs	r2, #1
 800043e:	701a      	strb	r2, [r3, #0]
        can_msg_counter++;
 8000440:	4b07      	ldr	r3, [pc, #28]	@ (8000460 <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	3301      	adds	r3, #1
 8000446:	4a06      	ldr	r2, [pc, #24]	@ (8000460 <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 8000448:	6013      	str	r3, [r2, #0]
    }
}
 800044a:	bf00      	nop
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	20000064 	.word	0x20000064
 8000458:	20000048 	.word	0x20000048
 800045c:	20000070 	.word	0x20000070
 8000460:	20000078 	.word	0x20000078

08000464 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
    errorCounter++;
 800046c:	4b04      	ldr	r3, [pc, #16]	@ (8000480 <HAL_CAN_ErrorCallback+0x1c>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	3301      	adds	r3, #1
 8000472:	4a03      	ldr	r2, [pc, #12]	@ (8000480 <HAL_CAN_ErrorCallback+0x1c>)
 8000474:	6013      	str	r3, [r2, #0]
}
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr
 8000480:	2000006c 	.word	0x2000006c

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000488:	f000 fa3e 	bl	8000908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048c:	f000 f816 	bl	80004bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000490:	f000 f890 	bl	80005b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000494:	f000 f858 	bl	8000548 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  SHIFTwrite(0x7F0000); // Turn off buzzer by default
 8000498:	f44f 00fe 	mov.w	r0, #8323072	@ 0x7f0000
 800049c:	f000 f8b8 	bl	8000610 <SHIFTwrite>
  
  // Initialize and start CAN
  CAN_Handler_Init();
 80004a0:	f7ff ff0e 	bl	80002c0 <CAN_Handler_Init>
  CAN_Config_Filter();
 80004a4:	f7ff ff42 	bl	800032c <CAN_Config_Filter>
  if (CAN_Start() != HAL_OK)
 80004a8:	f7ff ff68 	bl	800037c <CAN_Start>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <main+0x32>
  {
      Error_Handler();
 80004b2:	f000 f8cb 	bl	800064c <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    CAN_Handler_Process();
 80004b6:	f7ff ff7d 	bl	80003b4 <CAN_Handler_Process>
 80004ba:	e7fc      	b.n	80004b6 <main+0x32>

080004bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b090      	sub	sp, #64	@ 0x40
 80004c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c2:	f107 0318 	add.w	r3, r7, #24
 80004c6:	2228      	movs	r2, #40	@ 0x28
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f002 f9df 	bl	800288e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d0:	1d3b      	adds	r3, r7, #4
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004de:	2301      	movs	r3, #1
 80004e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004e8:	2300      	movs	r3, #0
 80004ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ec:	2301      	movs	r3, #1
 80004ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004f0:	2302      	movs	r3, #2
 80004f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004fa:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80004fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000500:	f107 0318 	add.w	r3, r7, #24
 8000504:	4618      	mov	r0, r3
 8000506:	f001 fb43 	bl	8001b90 <HAL_RCC_OscConfig>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000510:	f000 f89c 	bl	800064c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000514:	230f      	movs	r3, #15
 8000516:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000518:	2302      	movs	r3, #2
 800051a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800051c:	2300      	movs	r3, #0
 800051e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000520:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000524:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	2102      	movs	r1, #2
 800052e:	4618      	mov	r0, r3
 8000530:	f001 fdb0 	bl	8002094 <HAL_RCC_ClockConfig>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800053a:	f000 f887 	bl	800064c <Error_Handler>
  }
}
 800053e:	bf00      	nop
 8000540:	3740      	adds	r7, #64	@ 0x40
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
	...

08000548 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800054c:	4b17      	ldr	r3, [pc, #92]	@ (80005ac <MX_SPI1_Init+0x64>)
 800054e:	4a18      	ldr	r2, [pc, #96]	@ (80005b0 <MX_SPI1_Init+0x68>)
 8000550:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000552:	4b16      	ldr	r3, [pc, #88]	@ (80005ac <MX_SPI1_Init+0x64>)
 8000554:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000558:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800055a:	4b14      	ldr	r3, [pc, #80]	@ (80005ac <MX_SPI1_Init+0x64>)
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000560:	4b12      	ldr	r3, [pc, #72]	@ (80005ac <MX_SPI1_Init+0x64>)
 8000562:	2200      	movs	r2, #0
 8000564:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000566:	4b11      	ldr	r3, [pc, #68]	@ (80005ac <MX_SPI1_Init+0x64>)
 8000568:	2200      	movs	r2, #0
 800056a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800056c:	4b0f      	ldr	r3, [pc, #60]	@ (80005ac <MX_SPI1_Init+0x64>)
 800056e:	2200      	movs	r2, #0
 8000570:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000572:	4b0e      	ldr	r3, [pc, #56]	@ (80005ac <MX_SPI1_Init+0x64>)
 8000574:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000578:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800057a:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <MX_SPI1_Init+0x64>)
 800057c:	2218      	movs	r2, #24
 800057e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000580:	4b0a      	ldr	r3, [pc, #40]	@ (80005ac <MX_SPI1_Init+0x64>)
 8000582:	2200      	movs	r2, #0
 8000584:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000586:	4b09      	ldr	r3, [pc, #36]	@ (80005ac <MX_SPI1_Init+0x64>)
 8000588:	2200      	movs	r2, #0
 800058a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800058c:	4b07      	ldr	r3, [pc, #28]	@ (80005ac <MX_SPI1_Init+0x64>)
 800058e:	2200      	movs	r2, #0
 8000590:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000592:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <MX_SPI1_Init+0x64>)
 8000594:	220a      	movs	r2, #10
 8000596:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000598:	4804      	ldr	r0, [pc, #16]	@ (80005ac <MX_SPI1_Init+0x64>)
 800059a:	f001 fef7 	bl	800238c <HAL_SPI_Init>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80005a4:	f000 f852 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	200000b4 	.word	0x200000b4
 80005b0:	40013000 	.word	0x40013000

080005b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ba:	4b14      	ldr	r3, [pc, #80]	@ (800060c <MX_GPIO_Init+0x58>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	4a13      	ldr	r2, [pc, #76]	@ (800060c <MX_GPIO_Init+0x58>)
 80005c0:	f043 0320 	orr.w	r3, r3, #32
 80005c4:	6193      	str	r3, [r2, #24]
 80005c6:	4b11      	ldr	r3, [pc, #68]	@ (800060c <MX_GPIO_Init+0x58>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	f003 0320 	and.w	r3, r3, #32
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <MX_GPIO_Init+0x58>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	4a0d      	ldr	r2, [pc, #52]	@ (800060c <MX_GPIO_Init+0x58>)
 80005d8:	f043 0304 	orr.w	r3, r3, #4
 80005dc:	6193      	str	r3, [r2, #24]
 80005de:	4b0b      	ldr	r3, [pc, #44]	@ (800060c <MX_GPIO_Init+0x58>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	f003 0304 	and.w	r3, r3, #4
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ea:	4b08      	ldr	r3, [pc, #32]	@ (800060c <MX_GPIO_Init+0x58>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	4a07      	ldr	r2, [pc, #28]	@ (800060c <MX_GPIO_Init+0x58>)
 80005f0:	f043 0308 	orr.w	r3, r3, #8
 80005f4:	6193      	str	r3, [r2, #24]
 80005f6:	4b05      	ldr	r3, [pc, #20]	@ (800060c <MX_GPIO_Init+0x58>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	f003 0308 	and.w	r3, r3, #8
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr
 800060c:	40021000 	.word	0x40021000

08000610 <SHIFTwrite>:

/* USER CODE BEGIN 4 */
void SHIFTwrite(int p_value)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2110      	movs	r1, #16
 800061c:	4809      	ldr	r0, [pc, #36]	@ (8000644 <SHIFTwrite+0x34>)
 800061e:	f001 fa9f 	bl	8001b60 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&p_value, 3, HAL_MAX_DELAY);
 8000622:	1d39      	adds	r1, r7, #4
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	2203      	movs	r2, #3
 800062a:	4807      	ldr	r0, [pc, #28]	@ (8000648 <SHIFTwrite+0x38>)
 800062c:	f001 ff32 	bl	8002494 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	2110      	movs	r1, #16
 8000634:	4803      	ldr	r0, [pc, #12]	@ (8000644 <SHIFTwrite+0x34>)
 8000636:	f001 fa93 	bl	8001b60 <HAL_GPIO_WritePin>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40010800 	.word	0x40010800
 8000648:	200000b4 	.word	0x200000b4

0800064c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000650:	b672      	cpsid	i
}
 8000652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <Error_Handler+0x8>

08000658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800065e:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <HAL_MspInit+0x5c>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4a14      	ldr	r2, [pc, #80]	@ (80006b4 <HAL_MspInit+0x5c>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6193      	str	r3, [r2, #24]
 800066a:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <HAL_MspInit+0x5c>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000676:	4b0f      	ldr	r3, [pc, #60]	@ (80006b4 <HAL_MspInit+0x5c>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	4a0e      	ldr	r2, [pc, #56]	@ (80006b4 <HAL_MspInit+0x5c>)
 800067c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000680:	61d3      	str	r3, [r2, #28]
 8000682:	4b0c      	ldr	r3, [pc, #48]	@ (80006b4 <HAL_MspInit+0x5c>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800068e:	4b0a      	ldr	r3, [pc, #40]	@ (80006b8 <HAL_MspInit+0x60>)
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	4a04      	ldr	r2, [pc, #16]	@ (80006b8 <HAL_MspInit+0x60>)
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006aa:	bf00      	nop
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	40021000 	.word	0x40021000
 80006b8:	40010000 	.word	0x40010000

080006bc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	@ 0x28
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a2d      	ldr	r2, [pc, #180]	@ (800078c <HAL_CAN_MspInit+0xd0>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d153      	bne.n	8000784 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006dc:	4b2c      	ldr	r3, [pc, #176]	@ (8000790 <HAL_CAN_MspInit+0xd4>)
 80006de:	69db      	ldr	r3, [r3, #28]
 80006e0:	4a2b      	ldr	r2, [pc, #172]	@ (8000790 <HAL_CAN_MspInit+0xd4>)
 80006e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006e6:	61d3      	str	r3, [r2, #28]
 80006e8:	4b29      	ldr	r3, [pc, #164]	@ (8000790 <HAL_CAN_MspInit+0xd4>)
 80006ea:	69db      	ldr	r3, [r3, #28]
 80006ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f4:	4b26      	ldr	r3, [pc, #152]	@ (8000790 <HAL_CAN_MspInit+0xd4>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a25      	ldr	r2, [pc, #148]	@ (8000790 <HAL_CAN_MspInit+0xd4>)
 80006fa:	f043 0308 	orr.w	r3, r3, #8
 80006fe:	6193      	str	r3, [r2, #24]
 8000700:	4b23      	ldr	r3, [pc, #140]	@ (8000790 <HAL_CAN_MspInit+0xd4>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f003 0308 	and.w	r3, r3, #8
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800070c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	481c      	ldr	r0, [pc, #112]	@ (8000794 <HAL_CAN_MspInit+0xd8>)
 8000722:	f001 f899 	bl	8001858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000726:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800072a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072c:	2302      	movs	r3, #2
 800072e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000730:	2303      	movs	r3, #3
 8000732:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4619      	mov	r1, r3
 800073a:	4816      	ldr	r0, [pc, #88]	@ (8000794 <HAL_CAN_MspInit+0xd8>)
 800073c:	f001 f88c 	bl	8001858 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000740:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <HAL_CAN_MspInit+0xdc>)
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
 8000746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000748:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 800074c:	627b      	str	r3, [r7, #36]	@ 0x24
 800074e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000750:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000754:	627b      	str	r3, [r7, #36]	@ 0x24
 8000756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000758:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800075c:	627b      	str	r3, [r7, #36]	@ 0x24
 800075e:	4a0e      	ldr	r2, [pc, #56]	@ (8000798 <HAL_CAN_MspInit+0xdc>)
 8000760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000762:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000764:	2200      	movs	r2, #0
 8000766:	2100      	movs	r1, #0
 8000768:	2015      	movs	r0, #21
 800076a:	f001 f83e 	bl	80017ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800076e:	2015      	movs	r0, #21
 8000770:	f001 f857 	bl	8001822 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	2016      	movs	r0, #22
 800077a:	f001 f836 	bl	80017ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800077e:	2016      	movs	r0, #22
 8000780:	f001 f84f 	bl	8001822 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000784:	bf00      	nop
 8000786:	3728      	adds	r7, #40	@ 0x28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40006400 	.word	0x40006400
 8000790:	40021000 	.word	0x40021000
 8000794:	40010c00 	.word	0x40010c00
 8000798:	40010000 	.word	0x40010000

0800079c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a1b      	ldr	r2, [pc, #108]	@ (8000824 <HAL_SPI_MspInit+0x88>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d12f      	bne.n	800081c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <HAL_SPI_MspInit+0x8c>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a19      	ldr	r2, [pc, #100]	@ (8000828 <HAL_SPI_MspInit+0x8c>)
 80007c2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <HAL_SPI_MspInit+0x8c>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d4:	4b14      	ldr	r3, [pc, #80]	@ (8000828 <HAL_SPI_MspInit+0x8c>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a13      	ldr	r2, [pc, #76]	@ (8000828 <HAL_SPI_MspInit+0x8c>)
 80007da:	f043 0304 	orr.w	r3, r3, #4
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <HAL_SPI_MspInit+0x8c>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0304 	and.w	r3, r3, #4
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80007ec:	23a0      	movs	r3, #160	@ 0xa0
 80007ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f0:	2302      	movs	r3, #2
 80007f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f4:	2303      	movs	r3, #3
 80007f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	4619      	mov	r1, r3
 80007fe:	480b      	ldr	r0, [pc, #44]	@ (800082c <HAL_SPI_MspInit+0x90>)
 8000800:	f001 f82a 	bl	8001858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000804:	2340      	movs	r3, #64	@ 0x40
 8000806:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	4619      	mov	r1, r3
 8000816:	4805      	ldr	r0, [pc, #20]	@ (800082c <HAL_SPI_MspInit+0x90>)
 8000818:	f001 f81e 	bl	8001858 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800081c:	bf00      	nop
 800081e:	3720      	adds	r7, #32
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40013000 	.word	0x40013000
 8000828:	40021000 	.word	0x40021000
 800082c:	40010800 	.word	0x40010800

08000830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <NMI_Handler+0x4>

08000838 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <HardFault_Handler+0x4>

08000840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <MemManage_Handler+0x4>

08000848 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <BusFault_Handler+0x4>

08000850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <UsageFault_Handler+0x4>

08000858 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr

08000870 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000880:	f000 f888 	bl	8000994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}

08000888 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800088c:	4802      	ldr	r0, [pc, #8]	@ (8000898 <CAN1_RX1_IRQHandler+0x10>)
 800088e:	f000 fcba 	bl	8001206 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	2000008c 	.word	0x2000008c

0800089c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80008a0:	4802      	ldr	r0, [pc, #8]	@ (80008ac <CAN1_SCE_IRQHandler+0x10>)
 80008a2:	f000 fcb0 	bl	8001206 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	2000008c 	.word	0x2000008c

080008b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr

080008bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008bc:	f7ff fff8 	bl	80008b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c0:	480b      	ldr	r0, [pc, #44]	@ (80008f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008c2:	490c      	ldr	r1, [pc, #48]	@ (80008f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008c4:	4a0c      	ldr	r2, [pc, #48]	@ (80008f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c8:	e002      	b.n	80008d0 <LoopCopyDataInit>

080008ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ce:	3304      	adds	r3, #4

080008d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d4:	d3f9      	bcc.n	80008ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008d6:	4a09      	ldr	r2, [pc, #36]	@ (80008fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008d8:	4c09      	ldr	r4, [pc, #36]	@ (8000900 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008dc:	e001      	b.n	80008e2 <LoopFillZerobss>

080008de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e0:	3204      	adds	r2, #4

080008e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e4:	d3fb      	bcc.n	80008de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008e6:	f001 ffdb 	bl	80028a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ea:	f7ff fdcb 	bl	8000484 <main>
  bx lr
 80008ee:	4770      	bx	lr
  ldr r0, =_sdata
 80008f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80008f8:	08002934 	.word	0x08002934
  ldr r2, =_sbss
 80008fc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000900:	20000110 	.word	0x20000110

08000904 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000904:	e7fe      	b.n	8000904 <ADC1_2_IRQHandler>
	...

08000908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800090c:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <HAL_Init+0x28>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a07      	ldr	r2, [pc, #28]	@ (8000930 <HAL_Init+0x28>)
 8000912:	f043 0310 	orr.w	r3, r3, #16
 8000916:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000918:	2003      	movs	r0, #3
 800091a:	f000 ff5b 	bl	80017d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800091e:	200f      	movs	r0, #15
 8000920:	f000 f808 	bl	8000934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000924:	f7ff fe98 	bl	8000658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40022000 	.word	0x40022000

08000934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800093c:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <HAL_InitTick+0x54>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b12      	ldr	r3, [pc, #72]	@ (800098c <HAL_InitTick+0x58>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800094a:	fbb3 f3f1 	udiv	r3, r3, r1
 800094e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000952:	4618      	mov	r0, r3
 8000954:	f000 ff73 	bl	800183e <HAL_SYSTICK_Config>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e00e      	b.n	8000980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b0f      	cmp	r3, #15
 8000966:	d80a      	bhi.n	800097e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000968:	2200      	movs	r2, #0
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	f000 ff3b 	bl	80017ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000974:	4a06      	ldr	r2, [pc, #24]	@ (8000990 <HAL_InitTick+0x5c>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800097a:	2300      	movs	r3, #0
 800097c:	e000      	b.n	8000980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000008 	.word	0x20000008
 800098c:	20000010 	.word	0x20000010
 8000990:	2000000c 	.word	0x2000000c

08000994 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000998:	4b05      	ldr	r3, [pc, #20]	@ (80009b0 <HAL_IncTick+0x1c>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	461a      	mov	r2, r3
 800099e:	4b05      	ldr	r3, [pc, #20]	@ (80009b4 <HAL_IncTick+0x20>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4413      	add	r3, r2
 80009a4:	4a03      	ldr	r2, [pc, #12]	@ (80009b4 <HAL_IncTick+0x20>)
 80009a6:	6013      	str	r3, [r2, #0]
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	20000010 	.word	0x20000010
 80009b4:	2000010c 	.word	0x2000010c

080009b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  return uwTick;
 80009bc:	4b02      	ldr	r3, [pc, #8]	@ (80009c8 <HAL_GetTick+0x10>)
 80009be:	681b      	ldr	r3, [r3, #0]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	2000010c 	.word	0x2000010c

080009cc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d101      	bne.n	80009de <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	e0ed      	b.n	8000bba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d102      	bne.n	80009f0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f7ff fe66 	bl	80006bc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f042 0201 	orr.w	r2, r2, #1
 80009fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a00:	f7ff ffda 	bl	80009b8 <HAL_GetTick>
 8000a04:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a06:	e012      	b.n	8000a2e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a08:	f7ff ffd6 	bl	80009b8 <HAL_GetTick>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	2b0a      	cmp	r3, #10
 8000a14:	d90b      	bls.n	8000a2e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a1a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2205      	movs	r2, #5
 8000a26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e0c5      	b.n	8000bba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d0e5      	beq.n	8000a08 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f022 0202 	bic.w	r2, r2, #2
 8000a4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a4c:	f7ff ffb4 	bl	80009b8 <HAL_GetTick>
 8000a50:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a52:	e012      	b.n	8000a7a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a54:	f7ff ffb0 	bl	80009b8 <HAL_GetTick>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	2b0a      	cmp	r3, #10
 8000a60:	d90b      	bls.n	8000a7a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a66:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2205      	movs	r2, #5
 8000a72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e09f      	b.n	8000bba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f003 0302 	and.w	r3, r3, #2
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d1e5      	bne.n	8000a54 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	7e1b      	ldrb	r3, [r3, #24]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d108      	bne.n	8000aa2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	e007      	b.n	8000ab2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ab0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	7e5b      	ldrb	r3, [r3, #25]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d108      	bne.n	8000acc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	e007      	b.n	8000adc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000ada:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	7e9b      	ldrb	r3, [r3, #26]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d108      	bne.n	8000af6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f042 0220 	orr.w	r2, r2, #32
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	e007      	b.n	8000b06 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f022 0220 	bic.w	r2, r2, #32
 8000b04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	7edb      	ldrb	r3, [r3, #27]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d108      	bne.n	8000b20 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f022 0210 	bic.w	r2, r2, #16
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	e007      	b.n	8000b30 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f042 0210 	orr.w	r2, r2, #16
 8000b2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7f1b      	ldrb	r3, [r3, #28]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d108      	bne.n	8000b4a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f042 0208 	orr.w	r2, r2, #8
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	e007      	b.n	8000b5a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f022 0208 	bic.w	r2, r2, #8
 8000b58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	7f5b      	ldrb	r3, [r3, #29]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d108      	bne.n	8000b74 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f042 0204 	orr.w	r2, r2, #4
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	e007      	b.n	8000b84 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f022 0204 	bic.w	r2, r2, #4
 8000b82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	689a      	ldr	r2, [r3, #8]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	431a      	orrs	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	695b      	ldr	r3, [r3, #20]
 8000b98:	ea42 0103 	orr.w	r1, r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	1e5a      	subs	r2, r3, #1
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b087      	sub	sp, #28
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bd8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000bda:	7cfb      	ldrb	r3, [r7, #19]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d003      	beq.n	8000be8 <HAL_CAN_ConfigFilter+0x26>
 8000be0:	7cfb      	ldrb	r3, [r7, #19]
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	f040 80aa 	bne.w	8000d3c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000bee:	f043 0201 	orr.w	r2, r3, #1
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	f003 031f 	and.w	r3, r3, #31
 8000c00:	2201      	movs	r2, #1
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	43db      	mvns	r3, r3
 8000c12:	401a      	ands	r2, r3
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d123      	bne.n	8000c6a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	401a      	ands	r2, r3
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c40:	683a      	ldr	r2, [r7, #0]
 8000c42:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c44:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	3248      	adds	r2, #72	@ 0x48
 8000c4a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c5e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c60:	6979      	ldr	r1, [r7, #20]
 8000c62:	3348      	adds	r3, #72	@ 0x48
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	440b      	add	r3, r1
 8000c68:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d122      	bne.n	8000cb8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c8e:	683a      	ldr	r2, [r7, #0]
 8000c90:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c92:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	3248      	adds	r2, #72	@ 0x48
 8000c98:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cae:	6979      	ldr	r1, [r7, #20]
 8000cb0:	3348      	adds	r3, #72	@ 0x48
 8000cb2:	00db      	lsls	r3, r3, #3
 8000cb4:	440b      	add	r3, r1
 8000cb6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d109      	bne.n	8000cd4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	401a      	ands	r2, r3
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000cd2:	e007      	b.n	8000ce4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	431a      	orrs	r2, r3
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	691b      	ldr	r3, [r3, #16]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d109      	bne.n	8000d00 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000cfe:	e007      	b.n	8000d10 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	6a1b      	ldr	r3, [r3, #32]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d107      	bne.n	8000d28 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	431a      	orrs	r2, r3
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000d2e:	f023 0201 	bic.w	r2, r3, #1
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	e006      	b.n	8000d4a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d40:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
  }
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	371c      	adds	r7, #28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d12e      	bne.n	8000dc6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f022 0201 	bic.w	r2, r2, #1
 8000d7e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000d80:	f7ff fe1a 	bl	80009b8 <HAL_GetTick>
 8000d84:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d86:	e012      	b.n	8000dae <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d88:	f7ff fe16 	bl	80009b8 <HAL_GetTick>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	2b0a      	cmp	r3, #10
 8000d94:	d90b      	bls.n	8000dae <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d9a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2205      	movs	r2, #5
 8000da6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e012      	b.n	8000dd4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1e5      	bne.n	8000d88 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e006      	b.n	8000dd4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dca:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
  }
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	@ 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
 8000de8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000df0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000dfa:	7ffb      	ldrb	r3, [r7, #31]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d003      	beq.n	8000e08 <HAL_CAN_AddTxMessage+0x2c>
 8000e00:	7ffb      	ldrb	r3, [r7, #31]
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	f040 80ad 	bne.w	8000f62 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10a      	bne.n	8000e28 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d105      	bne.n	8000e28 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f000 8095 	beq.w	8000f52 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	0e1b      	lsrs	r3, r3, #24
 8000e2c:	f003 0303 	and.w	r3, r3, #3
 8000e30:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e32:	2201      	movs	r2, #1
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d10d      	bne.n	8000e60 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e4e:	68f9      	ldr	r1, [r7, #12]
 8000e50:	6809      	ldr	r1, [r1, #0]
 8000e52:	431a      	orrs	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	3318      	adds	r3, #24
 8000e58:	011b      	lsls	r3, r3, #4
 8000e5a:	440b      	add	r3, r1
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	e00f      	b.n	8000e80 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e6a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e70:	68f9      	ldr	r1, [r7, #12]
 8000e72:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000e74:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3318      	adds	r3, #24
 8000e7a:	011b      	lsls	r3, r3, #4
 8000e7c:	440b      	add	r3, r1
 8000e7e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	6819      	ldr	r1, [r3, #0]
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	691a      	ldr	r2, [r3, #16]
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	3318      	adds	r3, #24
 8000e8c:	011b      	lsls	r3, r3, #4
 8000e8e:	440b      	add	r3, r1
 8000e90:	3304      	adds	r3, #4
 8000e92:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	7d1b      	ldrb	r3, [r3, #20]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d111      	bne.n	8000ec0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	3318      	adds	r3, #24
 8000ea4:	011b      	lsls	r3, r3, #4
 8000ea6:	4413      	add	r3, r2
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	68fa      	ldr	r2, [r7, #12]
 8000eae:	6811      	ldr	r1, [r2, #0]
 8000eb0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	3318      	adds	r3, #24
 8000eb8:	011b      	lsls	r3, r3, #4
 8000eba:	440b      	add	r3, r1
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3307      	adds	r3, #7
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	061a      	lsls	r2, r3, #24
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3306      	adds	r3, #6
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	041b      	lsls	r3, r3, #16
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3305      	adds	r3, #5
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	021b      	lsls	r3, r3, #8
 8000eda:	4313      	orrs	r3, r2
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	3204      	adds	r2, #4
 8000ee0:	7812      	ldrb	r2, [r2, #0]
 8000ee2:	4610      	mov	r0, r2
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	6811      	ldr	r1, [r2, #0]
 8000ee8:	ea43 0200 	orr.w	r2, r3, r0
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	011b      	lsls	r3, r3, #4
 8000ef0:	440b      	add	r3, r1
 8000ef2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000ef6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3303      	adds	r3, #3
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	061a      	lsls	r2, r3, #24
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3302      	adds	r3, #2
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	041b      	lsls	r3, r3, #16
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	021b      	lsls	r3, r3, #8
 8000f12:	4313      	orrs	r3, r2
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	7812      	ldrb	r2, [r2, #0]
 8000f18:	4610      	mov	r0, r2
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	6811      	ldr	r1, [r2, #0]
 8000f1e:	ea43 0200 	orr.w	r2, r3, r0
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	011b      	lsls	r3, r3, #4
 8000f26:	440b      	add	r3, r1
 8000f28:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000f2c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3318      	adds	r3, #24
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	4413      	add	r3, r2
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	68fa      	ldr	r2, [r7, #12]
 8000f3e:	6811      	ldr	r1, [r2, #0]
 8000f40:	f043 0201 	orr.w	r2, r3, #1
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	3318      	adds	r3, #24
 8000f48:	011b      	lsls	r3, r3, #4
 8000f4a:	440b      	add	r3, r1
 8000f4c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e00e      	b.n	8000f70 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f56:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e006      	b.n	8000f70 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f66:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
  }
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3724      	adds	r7, #36	@ 0x24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr

08000f7a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b087      	sub	sp, #28
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	60f8      	str	r0, [r7, #12]
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f8e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f90:	7dfb      	ldrb	r3, [r7, #23]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d003      	beq.n	8000f9e <HAL_CAN_GetRxMessage+0x24>
 8000f96:	7dfb      	ldrb	r3, [r7, #23]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	f040 8103 	bne.w	80011a4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d10e      	bne.n	8000fc2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d116      	bne.n	8000fe0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e0f7      	b.n	80011b2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	691b      	ldr	r3, [r3, #16]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d107      	bne.n	8000fe0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fd4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e0e8      	b.n	80011b2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	331b      	adds	r3, #27
 8000fe8:	011b      	lsls	r3, r3, #4
 8000fea:	4413      	add	r3, r2
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0204 	and.w	r2, r3, #4
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10c      	bne.n	8001018 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	331b      	adds	r3, #27
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	4413      	add	r3, r2
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	0d5b      	lsrs	r3, r3, #21
 800100e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	e00b      	b.n	8001030 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	331b      	adds	r3, #27
 8001020:	011b      	lsls	r3, r3, #4
 8001022:	4413      	add	r3, r2
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	08db      	lsrs	r3, r3, #3
 8001028:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	331b      	adds	r3, #27
 8001038:	011b      	lsls	r3, r3, #4
 800103a:	4413      	add	r3, r2
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0202 	and.w	r2, r3, #2
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	331b      	adds	r3, #27
 800104e:	011b      	lsls	r3, r3, #4
 8001050:	4413      	add	r3, r2
 8001052:	3304      	adds	r3, #4
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2208      	movs	r2, #8
 8001062:	611a      	str	r2, [r3, #16]
 8001064:	e00b      	b.n	800107e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	331b      	adds	r3, #27
 800106e:	011b      	lsls	r3, r3, #4
 8001070:	4413      	add	r3, r2
 8001072:	3304      	adds	r3, #4
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 020f 	and.w	r2, r3, #15
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	331b      	adds	r3, #27
 8001086:	011b      	lsls	r3, r3, #4
 8001088:	4413      	add	r3, r2
 800108a:	3304      	adds	r3, #4
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	b2da      	uxtb	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	331b      	adds	r3, #27
 800109e:	011b      	lsls	r3, r3, #4
 80010a0:	4413      	add	r3, r2
 80010a2:	3304      	adds	r3, #4
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	0c1b      	lsrs	r3, r3, #16
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	011b      	lsls	r3, r3, #4
 80010b6:	4413      	add	r3, r2
 80010b8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	011b      	lsls	r3, r3, #4
 80010cc:	4413      	add	r3, r2
 80010ce:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	0a1a      	lsrs	r2, r3, #8
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	3301      	adds	r3, #1
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	011b      	lsls	r3, r3, #4
 80010e6:	4413      	add	r3, r2
 80010e8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	0c1a      	lsrs	r2, r3, #16
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	3302      	adds	r3, #2
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	011b      	lsls	r3, r3, #4
 8001100:	4413      	add	r3, r2
 8001102:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	0e1a      	lsrs	r2, r3, #24
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	3303      	adds	r3, #3
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	4413      	add	r3, r2
 800111c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	3304      	adds	r3, #4
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	011b      	lsls	r3, r3, #4
 8001132:	4413      	add	r3, r2
 8001134:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	0a1a      	lsrs	r2, r3, #8
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	3305      	adds	r3, #5
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	4413      	add	r3, r2
 800114e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	0c1a      	lsrs	r2, r3, #16
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	3306      	adds	r3, #6
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	011b      	lsls	r3, r3, #4
 8001166:	4413      	add	r3, r2
 8001168:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	0e1a      	lsrs	r2, r3, #24
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	3307      	adds	r3, #7
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d108      	bne.n	8001190 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	68da      	ldr	r2, [r3, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f042 0220 	orr.w	r2, r2, #32
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	e007      	b.n	80011a0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	691a      	ldr	r2, [r3, #16]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 0220 	orr.w	r2, r2, #32
 800119e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80011a0:	2300      	movs	r3, #0
 80011a2:	e006      	b.n	80011b2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
  }
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	371c      	adds	r7, #28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011cc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d002      	beq.n	80011da <HAL_CAN_ActivateNotification+0x1e>
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d109      	bne.n	80011ee <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6959      	ldr	r1, [r3, #20]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	430a      	orrs	r2, r1
 80011e8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e006      	b.n	80011fc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
  }
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr

08001206 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b08a      	sub	sp, #40	@ 0x28
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b00      	cmp	r3, #0
 800124a:	d07c      	beq.n	8001346 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b00      	cmp	r3, #0
 8001254:	d023      	beq.n	800129e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2201      	movs	r2, #1
 800125c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 f983 	bl	8001574 <HAL_CAN_TxMailbox0CompleteCallback>
 800126e:	e016      	b.n	800129e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	2b00      	cmp	r3, #0
 8001278:	d004      	beq.n	8001284 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800127a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001280:	627b      	str	r3, [r7, #36]	@ 0x24
 8001282:	e00c      	b.n	800129e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	2b00      	cmp	r3, #0
 800128c:	d004      	beq.n	8001298 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001290:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
 8001296:	e002      	b.n	800129e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 f986 	bl	80015aa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d024      	beq.n	80012f2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 f962 	bl	8001586 <HAL_CAN_TxMailbox1CompleteCallback>
 80012c2:	e016      	b.n	80012f2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d004      	beq.n	80012d8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80012ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80012d6:	e00c      	b.n	80012f2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d004      	beq.n	80012ec <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80012e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80012ea:	e002      	b.n	80012f2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 f965 	bl	80015bc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d024      	beq.n	8001346 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001304:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 f941 	bl	8001598 <HAL_CAN_TxMailbox2CompleteCallback>
 8001316:	e016      	b.n	8001346 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d004      	beq.n	800132c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001324:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24
 800132a:	e00c      	b.n	8001346 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d004      	beq.n	8001340 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
 800133e:	e002      	b.n	8001346 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 f944 	bl	80015ce <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001346:	6a3b      	ldr	r3, [r7, #32]
 8001348:	f003 0308 	and.w	r3, r3, #8
 800134c:	2b00      	cmp	r3, #0
 800134e:	d00c      	beq.n	800136a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	f003 0310 	and.w	r3, r3, #16
 8001356:	2b00      	cmp	r3, #0
 8001358:	d007      	beq.n	800136a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800135a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2210      	movs	r2, #16
 8001368:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800136a:	6a3b      	ldr	r3, [r7, #32]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	2b00      	cmp	r3, #0
 8001372:	d00b      	beq.n	800138c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	2b00      	cmp	r3, #0
 800137c:	d006      	beq.n	800138c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2208      	movs	r2, #8
 8001384:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 f933 	bl	80015f2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800138c:	6a3b      	ldr	r3, [r7, #32]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d009      	beq.n	80013aa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d002      	beq.n	80013aa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 f91b 	bl	80015e0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80013aa:	6a3b      	ldr	r3, [r7, #32]
 80013ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d00c      	beq.n	80013ce <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	f003 0310 	and.w	r3, r3, #16
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d007      	beq.n	80013ce <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80013be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2210      	movs	r2, #16
 80013cc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80013ce:	6a3b      	ldr	r3, [r7, #32]
 80013d0:	f003 0320 	and.w	r3, r3, #32
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00b      	beq.n	80013f0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d006      	beq.n	80013f0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2208      	movs	r2, #8
 80013e8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 f90a 	bl	8001604 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80013f0:	6a3b      	ldr	r3, [r7, #32]
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d009      	beq.n	800140e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	2b00      	cmp	r3, #0
 8001406:	d002      	beq.n	800140e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff f809 	bl	8000420 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00b      	beq.n	8001430 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f003 0310 	and.w	r3, r3, #16
 800141e:	2b00      	cmp	r3, #0
 8001420:	d006      	beq.n	8001430 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2210      	movs	r2, #16
 8001428:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f8f3 	bl	8001616 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001430:	6a3b      	ldr	r3, [r7, #32]
 8001432:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00b      	beq.n	8001452 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	f003 0308 	and.w	r3, r3, #8
 8001440:	2b00      	cmp	r3, #0
 8001442:	d006      	beq.n	8001452 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2208      	movs	r2, #8
 800144a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 f8eb 	bl	8001628 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001452:	6a3b      	ldr	r3, [r7, #32]
 8001454:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d07b      	beq.n	8001554 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	2b00      	cmp	r3, #0
 8001464:	d072      	beq.n	800154c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001466:	6a3b      	ldr	r3, [r7, #32]
 8001468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800146c:	2b00      	cmp	r3, #0
 800146e:	d008      	beq.n	8001482 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800147a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001482:	6a3b      	ldr	r3, [r7, #32]
 8001484:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001488:	2b00      	cmp	r3, #0
 800148a:	d008      	beq.n	800149e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800149e:	6a3b      	ldr	r3, [r7, #32]
 80014a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d008      	beq.n	80014ba <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80014b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b4:	f043 0304 	orr.w	r3, r3, #4
 80014b8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014ba:	6a3b      	ldr	r3, [r7, #32]
 80014bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d043      	beq.n	800154c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d03e      	beq.n	800154c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80014d4:	2b60      	cmp	r3, #96	@ 0x60
 80014d6:	d02b      	beq.n	8001530 <HAL_CAN_IRQHandler+0x32a>
 80014d8:	2b60      	cmp	r3, #96	@ 0x60
 80014da:	d82e      	bhi.n	800153a <HAL_CAN_IRQHandler+0x334>
 80014dc:	2b50      	cmp	r3, #80	@ 0x50
 80014de:	d022      	beq.n	8001526 <HAL_CAN_IRQHandler+0x320>
 80014e0:	2b50      	cmp	r3, #80	@ 0x50
 80014e2:	d82a      	bhi.n	800153a <HAL_CAN_IRQHandler+0x334>
 80014e4:	2b40      	cmp	r3, #64	@ 0x40
 80014e6:	d019      	beq.n	800151c <HAL_CAN_IRQHandler+0x316>
 80014e8:	2b40      	cmp	r3, #64	@ 0x40
 80014ea:	d826      	bhi.n	800153a <HAL_CAN_IRQHandler+0x334>
 80014ec:	2b30      	cmp	r3, #48	@ 0x30
 80014ee:	d010      	beq.n	8001512 <HAL_CAN_IRQHandler+0x30c>
 80014f0:	2b30      	cmp	r3, #48	@ 0x30
 80014f2:	d822      	bhi.n	800153a <HAL_CAN_IRQHandler+0x334>
 80014f4:	2b10      	cmp	r3, #16
 80014f6:	d002      	beq.n	80014fe <HAL_CAN_IRQHandler+0x2f8>
 80014f8:	2b20      	cmp	r3, #32
 80014fa:	d005      	beq.n	8001508 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80014fc:	e01d      	b.n	800153a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80014fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001500:	f043 0308 	orr.w	r3, r3, #8
 8001504:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001506:	e019      	b.n	800153c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150a:	f043 0310 	orr.w	r3, r3, #16
 800150e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001510:	e014      	b.n	800153c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001514:	f043 0320 	orr.w	r3, r3, #32
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800151a:	e00f      	b.n	800153c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800151c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001524:	e00a      	b.n	800153c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001528:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800152e:	e005      	b.n	800153c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001532:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001536:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001538:	e000      	b.n	800153c <HAL_CAN_IRQHandler+0x336>
            break;
 800153a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	699a      	ldr	r2, [r3, #24]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800154a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2204      	movs	r2, #4
 8001552:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001556:	2b00      	cmp	r3, #0
 8001558:	d008      	beq.n	800156c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800155e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7fe ff7c 	bl	8000464 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800156c:	bf00      	nop
 800156e:	3728      	adds	r7, #40	@ 0x28
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr

08001586 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr

080015ce <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr

080015e0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr

080015f2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr

08001616 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr

08001628 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
	...

0800163c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800164c:	4b0c      	ldr	r3, [pc, #48]	@ (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001658:	4013      	ands	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001664:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800166c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166e:	4a04      	ldr	r2, [pc, #16]	@ (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	60d3      	str	r3, [r2, #12]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001688:	4b04      	ldr	r3, [pc, #16]	@ (800169c <__NVIC_GetPriorityGrouping+0x18>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	f003 0307 	and.w	r3, r3, #7
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	db0b      	blt.n	80016ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	f003 021f 	and.w	r2, r3, #31
 80016b8:	4906      	ldr	r1, [pc, #24]	@ (80016d4 <__NVIC_EnableIRQ+0x34>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	2001      	movs	r0, #1
 80016c2:	fa00 f202 	lsl.w	r2, r0, r2
 80016c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	e000e100 	.word	0xe000e100

080016d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	db0a      	blt.n	8001702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	490c      	ldr	r1, [pc, #48]	@ (8001724 <__NVIC_SetPriority+0x4c>)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	0112      	lsls	r2, r2, #4
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	440b      	add	r3, r1
 80016fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001700:	e00a      	b.n	8001718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4908      	ldr	r1, [pc, #32]	@ (8001728 <__NVIC_SetPriority+0x50>)
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	3b04      	subs	r3, #4
 8001710:	0112      	lsls	r2, r2, #4
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	440b      	add	r3, r1
 8001716:	761a      	strb	r2, [r3, #24]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000e100 	.word	0xe000e100
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800172c:	b480      	push	{r7}
 800172e:	b089      	sub	sp, #36	@ 0x24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f1c3 0307 	rsb	r3, r3, #7
 8001746:	2b04      	cmp	r3, #4
 8001748:	bf28      	it	cs
 800174a:	2304      	movcs	r3, #4
 800174c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3304      	adds	r3, #4
 8001752:	2b06      	cmp	r3, #6
 8001754:	d902      	bls.n	800175c <NVIC_EncodePriority+0x30>
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3b03      	subs	r3, #3
 800175a:	e000      	b.n	800175e <NVIC_EncodePriority+0x32>
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	f04f 32ff 	mov.w	r2, #4294967295
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43da      	mvns	r2, r3
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	401a      	ands	r2, r3
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001774:	f04f 31ff 	mov.w	r1, #4294967295
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	43d9      	mvns	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001784:	4313      	orrs	r3, r2
         );
}
 8001786:	4618      	mov	r0, r3
 8001788:	3724      	adds	r7, #36	@ 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017a0:	d301      	bcc.n	80017a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00f      	b.n	80017c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a6:	4a0a      	ldr	r2, [pc, #40]	@ (80017d0 <SysTick_Config+0x40>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ae:	210f      	movs	r1, #15
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295
 80017b4:	f7ff ff90 	bl	80016d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b8:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <SysTick_Config+0x40>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017be:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <SysTick_Config+0x40>)
 80017c0:	2207      	movs	r2, #7
 80017c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	e000e010 	.word	0xe000e010

080017d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ff2d 	bl	800163c <__NVIC_SetPriorityGrouping>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017fc:	f7ff ff42 	bl	8001684 <__NVIC_GetPriorityGrouping>
 8001800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	6978      	ldr	r0, [r7, #20]
 8001808:	f7ff ff90 	bl	800172c <NVIC_EncodePriority>
 800180c:	4602      	mov	r2, r0
 800180e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff5f 	bl	80016d8 <__NVIC_SetPriority>
}
 800181a:	bf00      	nop
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff35 	bl	80016a0 <__NVIC_EnableIRQ>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff ffa2 	bl	8001790 <SysTick_Config>
 800184c:	4603      	mov	r3, r0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001858:	b480      	push	{r7}
 800185a:	b08b      	sub	sp, #44	@ 0x2c
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001866:	2300      	movs	r3, #0
 8001868:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800186a:	e169      	b.n	8001b40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800186c:	2201      	movs	r2, #1
 800186e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	69fa      	ldr	r2, [r7, #28]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	429a      	cmp	r2, r3
 8001886:	f040 8158 	bne.w	8001b3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	4a9a      	ldr	r2, [pc, #616]	@ (8001af8 <HAL_GPIO_Init+0x2a0>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d05e      	beq.n	8001952 <HAL_GPIO_Init+0xfa>
 8001894:	4a98      	ldr	r2, [pc, #608]	@ (8001af8 <HAL_GPIO_Init+0x2a0>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d875      	bhi.n	8001986 <HAL_GPIO_Init+0x12e>
 800189a:	4a98      	ldr	r2, [pc, #608]	@ (8001afc <HAL_GPIO_Init+0x2a4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d058      	beq.n	8001952 <HAL_GPIO_Init+0xfa>
 80018a0:	4a96      	ldr	r2, [pc, #600]	@ (8001afc <HAL_GPIO_Init+0x2a4>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d86f      	bhi.n	8001986 <HAL_GPIO_Init+0x12e>
 80018a6:	4a96      	ldr	r2, [pc, #600]	@ (8001b00 <HAL_GPIO_Init+0x2a8>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d052      	beq.n	8001952 <HAL_GPIO_Init+0xfa>
 80018ac:	4a94      	ldr	r2, [pc, #592]	@ (8001b00 <HAL_GPIO_Init+0x2a8>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d869      	bhi.n	8001986 <HAL_GPIO_Init+0x12e>
 80018b2:	4a94      	ldr	r2, [pc, #592]	@ (8001b04 <HAL_GPIO_Init+0x2ac>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d04c      	beq.n	8001952 <HAL_GPIO_Init+0xfa>
 80018b8:	4a92      	ldr	r2, [pc, #584]	@ (8001b04 <HAL_GPIO_Init+0x2ac>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d863      	bhi.n	8001986 <HAL_GPIO_Init+0x12e>
 80018be:	4a92      	ldr	r2, [pc, #584]	@ (8001b08 <HAL_GPIO_Init+0x2b0>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d046      	beq.n	8001952 <HAL_GPIO_Init+0xfa>
 80018c4:	4a90      	ldr	r2, [pc, #576]	@ (8001b08 <HAL_GPIO_Init+0x2b0>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d85d      	bhi.n	8001986 <HAL_GPIO_Init+0x12e>
 80018ca:	2b12      	cmp	r3, #18
 80018cc:	d82a      	bhi.n	8001924 <HAL_GPIO_Init+0xcc>
 80018ce:	2b12      	cmp	r3, #18
 80018d0:	d859      	bhi.n	8001986 <HAL_GPIO_Init+0x12e>
 80018d2:	a201      	add	r2, pc, #4	@ (adr r2, 80018d8 <HAL_GPIO_Init+0x80>)
 80018d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d8:	08001953 	.word	0x08001953
 80018dc:	0800192d 	.word	0x0800192d
 80018e0:	0800193f 	.word	0x0800193f
 80018e4:	08001981 	.word	0x08001981
 80018e8:	08001987 	.word	0x08001987
 80018ec:	08001987 	.word	0x08001987
 80018f0:	08001987 	.word	0x08001987
 80018f4:	08001987 	.word	0x08001987
 80018f8:	08001987 	.word	0x08001987
 80018fc:	08001987 	.word	0x08001987
 8001900:	08001987 	.word	0x08001987
 8001904:	08001987 	.word	0x08001987
 8001908:	08001987 	.word	0x08001987
 800190c:	08001987 	.word	0x08001987
 8001910:	08001987 	.word	0x08001987
 8001914:	08001987 	.word	0x08001987
 8001918:	08001987 	.word	0x08001987
 800191c:	08001935 	.word	0x08001935
 8001920:	08001949 	.word	0x08001949
 8001924:	4a79      	ldr	r2, [pc, #484]	@ (8001b0c <HAL_GPIO_Init+0x2b4>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d013      	beq.n	8001952 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800192a:	e02c      	b.n	8001986 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	623b      	str	r3, [r7, #32]
          break;
 8001932:	e029      	b.n	8001988 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	3304      	adds	r3, #4
 800193a:	623b      	str	r3, [r7, #32]
          break;
 800193c:	e024      	b.n	8001988 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	3308      	adds	r3, #8
 8001944:	623b      	str	r3, [r7, #32]
          break;
 8001946:	e01f      	b.n	8001988 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	330c      	adds	r3, #12
 800194e:	623b      	str	r3, [r7, #32]
          break;
 8001950:	e01a      	b.n	8001988 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d102      	bne.n	8001960 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800195a:	2304      	movs	r3, #4
 800195c:	623b      	str	r3, [r7, #32]
          break;
 800195e:	e013      	b.n	8001988 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d105      	bne.n	8001974 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001968:	2308      	movs	r3, #8
 800196a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	611a      	str	r2, [r3, #16]
          break;
 8001972:	e009      	b.n	8001988 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001974:	2308      	movs	r3, #8
 8001976:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69fa      	ldr	r2, [r7, #28]
 800197c:	615a      	str	r2, [r3, #20]
          break;
 800197e:	e003      	b.n	8001988 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001980:	2300      	movs	r3, #0
 8001982:	623b      	str	r3, [r7, #32]
          break;
 8001984:	e000      	b.n	8001988 <HAL_GPIO_Init+0x130>
          break;
 8001986:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	2bff      	cmp	r3, #255	@ 0xff
 800198c:	d801      	bhi.n	8001992 <HAL_GPIO_Init+0x13a>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	e001      	b.n	8001996 <HAL_GPIO_Init+0x13e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3304      	adds	r3, #4
 8001996:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	2bff      	cmp	r3, #255	@ 0xff
 800199c:	d802      	bhi.n	80019a4 <HAL_GPIO_Init+0x14c>
 800199e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	e002      	b.n	80019aa <HAL_GPIO_Init+0x152>
 80019a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a6:	3b08      	subs	r3, #8
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	210f      	movs	r1, #15
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	401a      	ands	r2, r3
 80019bc:	6a39      	ldr	r1, [r7, #32]
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	fa01 f303 	lsl.w	r3, r1, r3
 80019c4:	431a      	orrs	r2, r3
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 80b1 	beq.w	8001b3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001b10 <HAL_GPIO_Init+0x2b8>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	4a4c      	ldr	r2, [pc, #304]	@ (8001b10 <HAL_GPIO_Init+0x2b8>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6193      	str	r3, [r2, #24]
 80019e4:	4b4a      	ldr	r3, [pc, #296]	@ (8001b10 <HAL_GPIO_Init+0x2b8>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019f0:	4a48      	ldr	r2, [pc, #288]	@ (8001b14 <HAL_GPIO_Init+0x2bc>)
 80019f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f4:	089b      	lsrs	r3, r3, #2
 80019f6:	3302      	adds	r3, #2
 80019f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	220f      	movs	r2, #15
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	4013      	ands	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a40      	ldr	r2, [pc, #256]	@ (8001b18 <HAL_GPIO_Init+0x2c0>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d013      	beq.n	8001a44 <HAL_GPIO_Init+0x1ec>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a3f      	ldr	r2, [pc, #252]	@ (8001b1c <HAL_GPIO_Init+0x2c4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d00d      	beq.n	8001a40 <HAL_GPIO_Init+0x1e8>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a3e      	ldr	r2, [pc, #248]	@ (8001b20 <HAL_GPIO_Init+0x2c8>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d007      	beq.n	8001a3c <HAL_GPIO_Init+0x1e4>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a3d      	ldr	r2, [pc, #244]	@ (8001b24 <HAL_GPIO_Init+0x2cc>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d101      	bne.n	8001a38 <HAL_GPIO_Init+0x1e0>
 8001a34:	2303      	movs	r3, #3
 8001a36:	e006      	b.n	8001a46 <HAL_GPIO_Init+0x1ee>
 8001a38:	2304      	movs	r3, #4
 8001a3a:	e004      	b.n	8001a46 <HAL_GPIO_Init+0x1ee>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e002      	b.n	8001a46 <HAL_GPIO_Init+0x1ee>
 8001a40:	2301      	movs	r3, #1
 8001a42:	e000      	b.n	8001a46 <HAL_GPIO_Init+0x1ee>
 8001a44:	2300      	movs	r3, #0
 8001a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a48:	f002 0203 	and.w	r2, r2, #3
 8001a4c:	0092      	lsls	r2, r2, #2
 8001a4e:	4093      	lsls	r3, r2
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a56:	492f      	ldr	r1, [pc, #188]	@ (8001b14 <HAL_GPIO_Init+0x2bc>)
 8001a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5a:	089b      	lsrs	r3, r3, #2
 8001a5c:	3302      	adds	r3, #2
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d006      	beq.n	8001a7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a70:	4b2d      	ldr	r3, [pc, #180]	@ (8001b28 <HAL_GPIO_Init+0x2d0>)
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	492c      	ldr	r1, [pc, #176]	@ (8001b28 <HAL_GPIO_Init+0x2d0>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	608b      	str	r3, [r1, #8]
 8001a7c:	e006      	b.n	8001a8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b28 <HAL_GPIO_Init+0x2d0>)
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	4928      	ldr	r1, [pc, #160]	@ (8001b28 <HAL_GPIO_Init+0x2d0>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d006      	beq.n	8001aa6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a98:	4b23      	ldr	r3, [pc, #140]	@ (8001b28 <HAL_GPIO_Init+0x2d0>)
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	4922      	ldr	r1, [pc, #136]	@ (8001b28 <HAL_GPIO_Init+0x2d0>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	60cb      	str	r3, [r1, #12]
 8001aa4:	e006      	b.n	8001ab4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aa6:	4b20      	ldr	r3, [pc, #128]	@ (8001b28 <HAL_GPIO_Init+0x2d0>)
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	491e      	ldr	r1, [pc, #120]	@ (8001b28 <HAL_GPIO_Init+0x2d0>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d006      	beq.n	8001ace <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ac0:	4b19      	ldr	r3, [pc, #100]	@ (8001b28 <HAL_GPIO_Init+0x2d0>)
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	4918      	ldr	r1, [pc, #96]	@ (8001b28 <HAL_GPIO_Init+0x2d0>)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]
 8001acc:	e006      	b.n	8001adc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ace:	4b16      	ldr	r3, [pc, #88]	@ (8001b28 <HAL_GPIO_Init+0x2d0>)
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	4914      	ldr	r1, [pc, #80]	@ (8001b28 <HAL_GPIO_Init+0x2d0>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d021      	beq.n	8001b2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <HAL_GPIO_Init+0x2d0>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	490e      	ldr	r1, [pc, #56]	@ (8001b28 <HAL_GPIO_Init+0x2d0>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	600b      	str	r3, [r1, #0]
 8001af4:	e021      	b.n	8001b3a <HAL_GPIO_Init+0x2e2>
 8001af6:	bf00      	nop
 8001af8:	10320000 	.word	0x10320000
 8001afc:	10310000 	.word	0x10310000
 8001b00:	10220000 	.word	0x10220000
 8001b04:	10210000 	.word	0x10210000
 8001b08:	10120000 	.word	0x10120000
 8001b0c:	10110000 	.word	0x10110000
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40010000 	.word	0x40010000
 8001b18:	40010800 	.word	0x40010800
 8001b1c:	40010c00 	.word	0x40010c00
 8001b20:	40011000 	.word	0x40011000
 8001b24:	40011400 	.word	0x40011400
 8001b28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <HAL_GPIO_Init+0x304>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	4909      	ldr	r1, [pc, #36]	@ (8001b5c <HAL_GPIO_Init+0x304>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b46:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f47f ae8e 	bne.w	800186c <HAL_GPIO_Init+0x14>
  }
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	372c      	adds	r7, #44	@ 0x2c
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr
 8001b5c:	40010400 	.word	0x40010400

08001b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	807b      	strh	r3, [r7, #2]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b70:	787b      	ldrb	r3, [r7, #1]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b76:	887a      	ldrh	r2, [r7, #2]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b7c:	e003      	b.n	8001b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b7e:	887b      	ldrh	r3, [r7, #2]
 8001b80:	041a      	lsls	r2, r3, #16
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	611a      	str	r2, [r3, #16]
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e272      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 8087 	beq.w	8001cbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bb0:	4b92      	ldr	r3, [pc, #584]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 030c 	and.w	r3, r3, #12
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d00c      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bbc:	4b8f      	ldr	r3, [pc, #572]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d112      	bne.n	8001bee <HAL_RCC_OscConfig+0x5e>
 8001bc8:	4b8c      	ldr	r3, [pc, #560]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bd4:	d10b      	bne.n	8001bee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd6:	4b89      	ldr	r3, [pc, #548]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d06c      	beq.n	8001cbc <HAL_RCC_OscConfig+0x12c>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d168      	bne.n	8001cbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e24c      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bf6:	d106      	bne.n	8001c06 <HAL_RCC_OscConfig+0x76>
 8001bf8:	4b80      	ldr	r3, [pc, #512]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a7f      	ldr	r2, [pc, #508]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	e02e      	b.n	8001c64 <HAL_RCC_OscConfig+0xd4>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x98>
 8001c0e:	4b7b      	ldr	r3, [pc, #492]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a7a      	ldr	r2, [pc, #488]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	4b78      	ldr	r3, [pc, #480]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a77      	ldr	r2, [pc, #476]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	e01d      	b.n	8001c64 <HAL_RCC_OscConfig+0xd4>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c30:	d10c      	bne.n	8001c4c <HAL_RCC_OscConfig+0xbc>
 8001c32:	4b72      	ldr	r3, [pc, #456]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a71      	ldr	r2, [pc, #452]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	4b6f      	ldr	r3, [pc, #444]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a6e      	ldr	r2, [pc, #440]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e00b      	b.n	8001c64 <HAL_RCC_OscConfig+0xd4>
 8001c4c:	4b6b      	ldr	r3, [pc, #428]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a6a      	ldr	r2, [pc, #424]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	4b68      	ldr	r3, [pc, #416]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a67      	ldr	r2, [pc, #412]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d013      	beq.n	8001c94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7fe fea4 	bl	80009b8 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c74:	f7fe fea0 	bl	80009b8 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b64      	cmp	r3, #100	@ 0x64
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e200      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c86:	4b5d      	ldr	r3, [pc, #372]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0xe4>
 8001c92:	e014      	b.n	8001cbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7fe fe90 	bl	80009b8 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c9c:	f7fe fe8c 	bl	80009b8 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b64      	cmp	r3, #100	@ 0x64
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e1ec      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cae:	4b53      	ldr	r3, [pc, #332]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x10c>
 8001cba:	e000      	b.n	8001cbe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d063      	beq.n	8001d92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cca:	4b4c      	ldr	r3, [pc, #304]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00b      	beq.n	8001cee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cd6:	4b49      	ldr	r3, [pc, #292]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d11c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x18c>
 8001ce2:	4b46      	ldr	r3, [pc, #280]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d116      	bne.n	8001d1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cee:	4b43      	ldr	r3, [pc, #268]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d005      	beq.n	8001d06 <HAL_RCC_OscConfig+0x176>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d001      	beq.n	8001d06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e1c0      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d06:	4b3d      	ldr	r3, [pc, #244]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	4939      	ldr	r1, [pc, #228]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1a:	e03a      	b.n	8001d92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d020      	beq.n	8001d66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d24:	4b36      	ldr	r3, [pc, #216]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2a:	f7fe fe45 	bl	80009b8 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d32:	f7fe fe41 	bl	80009b8 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e1a1      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d44:	4b2d      	ldr	r3, [pc, #180]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0f0      	beq.n	8001d32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d50:	4b2a      	ldr	r3, [pc, #168]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4927      	ldr	r1, [pc, #156]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	600b      	str	r3, [r1, #0]
 8001d64:	e015      	b.n	8001d92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d66:	4b26      	ldr	r3, [pc, #152]	@ (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7fe fe24 	bl	80009b8 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d74:	f7fe fe20 	bl	80009b8 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e180      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d86:	4b1d      	ldr	r3, [pc, #116]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d03a      	beq.n	8001e14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d019      	beq.n	8001dda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001da6:	4b17      	ldr	r3, [pc, #92]	@ (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dac:	f7fe fe04 	bl	80009b8 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db4:	f7fe fe00 	bl	80009b8 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e160      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	f000 fabc 	bl	8002350 <RCC_Delay>
 8001dd8:	e01c      	b.n	8001e14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dda:	4b0a      	ldr	r3, [pc, #40]	@ (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de0:	f7fe fdea 	bl	80009b8 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de6:	e00f      	b.n	8001e08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de8:	f7fe fde6 	bl	80009b8 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d908      	bls.n	8001e08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e146      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	42420000 	.word	0x42420000
 8001e04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e08:	4b92      	ldr	r3, [pc, #584]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1e9      	bne.n	8001de8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 80a6 	beq.w	8001f6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e22:	2300      	movs	r3, #0
 8001e24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e26:	4b8b      	ldr	r3, [pc, #556]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10d      	bne.n	8001e4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e32:	4b88      	ldr	r3, [pc, #544]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	4a87      	ldr	r2, [pc, #540]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e3c:	61d3      	str	r3, [r2, #28]
 8001e3e:	4b85      	ldr	r3, [pc, #532]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4e:	4b82      	ldr	r3, [pc, #520]	@ (8002058 <HAL_RCC_OscConfig+0x4c8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d118      	bne.n	8001e8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e5a:	4b7f      	ldr	r3, [pc, #508]	@ (8002058 <HAL_RCC_OscConfig+0x4c8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a7e      	ldr	r2, [pc, #504]	@ (8002058 <HAL_RCC_OscConfig+0x4c8>)
 8001e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e66:	f7fe fda7 	bl	80009b8 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e6e:	f7fe fda3 	bl	80009b8 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b64      	cmp	r3, #100	@ 0x64
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e103      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e80:	4b75      	ldr	r3, [pc, #468]	@ (8002058 <HAL_RCC_OscConfig+0x4c8>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f0      	beq.n	8001e6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d106      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x312>
 8001e94:	4b6f      	ldr	r3, [pc, #444]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	4a6e      	ldr	r2, [pc, #440]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6213      	str	r3, [r2, #32]
 8001ea0:	e02d      	b.n	8001efe <HAL_RCC_OscConfig+0x36e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x334>
 8001eaa:	4b6a      	ldr	r3, [pc, #424]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	4a69      	ldr	r2, [pc, #420]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001eb0:	f023 0301 	bic.w	r3, r3, #1
 8001eb4:	6213      	str	r3, [r2, #32]
 8001eb6:	4b67      	ldr	r3, [pc, #412]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	4a66      	ldr	r2, [pc, #408]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	f023 0304 	bic.w	r3, r3, #4
 8001ec0:	6213      	str	r3, [r2, #32]
 8001ec2:	e01c      	b.n	8001efe <HAL_RCC_OscConfig+0x36e>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	2b05      	cmp	r3, #5
 8001eca:	d10c      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x356>
 8001ecc:	4b61      	ldr	r3, [pc, #388]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	4a60      	ldr	r2, [pc, #384]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001ed2:	f043 0304 	orr.w	r3, r3, #4
 8001ed6:	6213      	str	r3, [r2, #32]
 8001ed8:	4b5e      	ldr	r3, [pc, #376]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	4a5d      	ldr	r2, [pc, #372]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	6213      	str	r3, [r2, #32]
 8001ee4:	e00b      	b.n	8001efe <HAL_RCC_OscConfig+0x36e>
 8001ee6:	4b5b      	ldr	r3, [pc, #364]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	4a5a      	ldr	r2, [pc, #360]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	f023 0301 	bic.w	r3, r3, #1
 8001ef0:	6213      	str	r3, [r2, #32]
 8001ef2:	4b58      	ldr	r3, [pc, #352]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4a57      	ldr	r2, [pc, #348]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	f023 0304 	bic.w	r3, r3, #4
 8001efc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d015      	beq.n	8001f32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f06:	f7fe fd57 	bl	80009b8 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0e:	f7fe fd53 	bl	80009b8 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e0b1      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f24:	4b4b      	ldr	r3, [pc, #300]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0ee      	beq.n	8001f0e <HAL_RCC_OscConfig+0x37e>
 8001f30:	e014      	b.n	8001f5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f32:	f7fe fd41 	bl	80009b8 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f38:	e00a      	b.n	8001f50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3a:	f7fe fd3d 	bl	80009b8 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e09b      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f50:	4b40      	ldr	r3, [pc, #256]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1ee      	bne.n	8001f3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f5c:	7dfb      	ldrb	r3, [r7, #23]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d105      	bne.n	8001f6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f62:	4b3c      	ldr	r3, [pc, #240]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	4a3b      	ldr	r2, [pc, #236]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 8087 	beq.w	8002086 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f78:	4b36      	ldr	r3, [pc, #216]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 030c 	and.w	r3, r3, #12
 8001f80:	2b08      	cmp	r3, #8
 8001f82:	d061      	beq.n	8002048 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d146      	bne.n	800201a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8c:	4b33      	ldr	r3, [pc, #204]	@ (800205c <HAL_RCC_OscConfig+0x4cc>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f92:	f7fe fd11 	bl	80009b8 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9a:	f7fe fd0d 	bl	80009b8 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e06d      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fac:	4b29      	ldr	r3, [pc, #164]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1f0      	bne.n	8001f9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fc0:	d108      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fc2:	4b24      	ldr	r3, [pc, #144]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	4921      	ldr	r1, [pc, #132]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a19      	ldr	r1, [r3, #32]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	491b      	ldr	r1, [pc, #108]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fec:	4b1b      	ldr	r3, [pc, #108]	@ (800205c <HAL_RCC_OscConfig+0x4cc>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff2:	f7fe fce1 	bl	80009b8 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffa:	f7fe fcdd 	bl	80009b8 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e03d      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800200c:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x46a>
 8002018:	e035      	b.n	8002086 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201a:	4b10      	ldr	r3, [pc, #64]	@ (800205c <HAL_RCC_OscConfig+0x4cc>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002020:	f7fe fcca 	bl	80009b8 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002028:	f7fe fcc6 	bl	80009b8 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e026      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800203a:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <HAL_RCC_OscConfig+0x4c4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x498>
 8002046:	e01e      	b.n	8002086 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d107      	bne.n	8002060 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e019      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
 8002054:	40021000 	.word	0x40021000
 8002058:	40007000 	.word	0x40007000
 800205c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002060:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <HAL_RCC_OscConfig+0x500>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	429a      	cmp	r2, r3
 8002072:	d106      	bne.n	8002082 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207e:	429a      	cmp	r2, r3
 8002080:	d001      	beq.n	8002086 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40021000 	.word	0x40021000

08002094 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e0d0      	b.n	800224a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020a8:	4b6a      	ldr	r3, [pc, #424]	@ (8002254 <HAL_RCC_ClockConfig+0x1c0>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d910      	bls.n	80020d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b6:	4b67      	ldr	r3, [pc, #412]	@ (8002254 <HAL_RCC_ClockConfig+0x1c0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 0207 	bic.w	r2, r3, #7
 80020be:	4965      	ldr	r1, [pc, #404]	@ (8002254 <HAL_RCC_ClockConfig+0x1c0>)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c6:	4b63      	ldr	r3, [pc, #396]	@ (8002254 <HAL_RCC_ClockConfig+0x1c0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0b8      	b.n	800224a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d020      	beq.n	8002126 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020f0:	4b59      	ldr	r3, [pc, #356]	@ (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	4a58      	ldr	r2, [pc, #352]	@ (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002108:	4b53      	ldr	r3, [pc, #332]	@ (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4a52      	ldr	r2, [pc, #328]	@ (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 800210e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002112:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002114:	4b50      	ldr	r3, [pc, #320]	@ (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	494d      	ldr	r1, [pc, #308]	@ (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	4313      	orrs	r3, r2
 8002124:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d040      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d107      	bne.n	800214a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213a:	4b47      	ldr	r3, [pc, #284]	@ (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d115      	bne.n	8002172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e07f      	b.n	800224a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d107      	bne.n	8002162 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002152:	4b41      	ldr	r3, [pc, #260]	@ (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d109      	bne.n	8002172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e073      	b.n	800224a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002162:	4b3d      	ldr	r3, [pc, #244]	@ (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e06b      	b.n	800224a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002172:	4b39      	ldr	r3, [pc, #228]	@ (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f023 0203 	bic.w	r2, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4936      	ldr	r1, [pc, #216]	@ (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	4313      	orrs	r3, r2
 8002182:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002184:	f7fe fc18 	bl	80009b8 <HAL_GetTick>
 8002188:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218a:	e00a      	b.n	80021a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800218c:	f7fe fc14 	bl	80009b8 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800219a:	4293      	cmp	r3, r2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e053      	b.n	800224a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 020c 	and.w	r2, r3, #12
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d1eb      	bne.n	800218c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021b4:	4b27      	ldr	r3, [pc, #156]	@ (8002254 <HAL_RCC_ClockConfig+0x1c0>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d210      	bcs.n	80021e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c2:	4b24      	ldr	r3, [pc, #144]	@ (8002254 <HAL_RCC_ClockConfig+0x1c0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 0207 	bic.w	r2, r3, #7
 80021ca:	4922      	ldr	r1, [pc, #136]	@ (8002254 <HAL_RCC_ClockConfig+0x1c0>)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d2:	4b20      	ldr	r3, [pc, #128]	@ (8002254 <HAL_RCC_ClockConfig+0x1c0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e032      	b.n	800224a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d008      	beq.n	8002202 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021f0:	4b19      	ldr	r3, [pc, #100]	@ (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	4916      	ldr	r1, [pc, #88]	@ (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	2b00      	cmp	r3, #0
 800220c:	d009      	beq.n	8002222 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800220e:	4b12      	ldr	r3, [pc, #72]	@ (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	490e      	ldr	r1, [pc, #56]	@ (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 800221e:	4313      	orrs	r3, r2
 8002220:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002222:	f000 f821 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 8002226:	4602      	mov	r2, r0
 8002228:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	490a      	ldr	r1, [pc, #40]	@ (800225c <HAL_RCC_ClockConfig+0x1c8>)
 8002234:	5ccb      	ldrb	r3, [r1, r3]
 8002236:	fa22 f303 	lsr.w	r3, r2, r3
 800223a:	4a09      	ldr	r2, [pc, #36]	@ (8002260 <HAL_RCC_ClockConfig+0x1cc>)
 800223c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800223e:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <HAL_RCC_ClockConfig+0x1d0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe fb76 	bl	8000934 <HAL_InitTick>

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40022000 	.word	0x40022000
 8002258:	40021000 	.word	0x40021000
 800225c:	08002900 	.word	0x08002900
 8002260:	20000008 	.word	0x20000008
 8002264:	2000000c 	.word	0x2000000c

08002268 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002268:	b480      	push	{r7}
 800226a:	b087      	sub	sp, #28
 800226c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	2300      	movs	r3, #0
 800227c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800227e:	2300      	movs	r3, #0
 8002280:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002282:	4b1e      	ldr	r3, [pc, #120]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x94>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	2b04      	cmp	r3, #4
 8002290:	d002      	beq.n	8002298 <HAL_RCC_GetSysClockFreq+0x30>
 8002292:	2b08      	cmp	r3, #8
 8002294:	d003      	beq.n	800229e <HAL_RCC_GetSysClockFreq+0x36>
 8002296:	e027      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002298:	4b19      	ldr	r3, [pc, #100]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x98>)
 800229a:	613b      	str	r3, [r7, #16]
      break;
 800229c:	e027      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	0c9b      	lsrs	r3, r3, #18
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	4a17      	ldr	r2, [pc, #92]	@ (8002304 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022a8:	5cd3      	ldrb	r3, [r2, r3]
 80022aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d010      	beq.n	80022d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022b6:	4b11      	ldr	r3, [pc, #68]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x94>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	0c5b      	lsrs	r3, r3, #17
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	4a11      	ldr	r2, [pc, #68]	@ (8002308 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022c2:	5cd3      	ldrb	r3, [r2, r3]
 80022c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ca:	fb03 f202 	mul.w	r2, r3, r2
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	e004      	b.n	80022e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a0c      	ldr	r2, [pc, #48]	@ (800230c <HAL_RCC_GetSysClockFreq+0xa4>)
 80022dc:	fb02 f303 	mul.w	r3, r2, r3
 80022e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	613b      	str	r3, [r7, #16]
      break;
 80022e6:	e002      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022e8:	4b09      	ldr	r3, [pc, #36]	@ (8002310 <HAL_RCC_GetSysClockFreq+0xa8>)
 80022ea:	613b      	str	r3, [r7, #16]
      break;
 80022ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ee:	693b      	ldr	r3, [r7, #16]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	371c      	adds	r7, #28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40021000 	.word	0x40021000
 8002300:	00b71b00 	.word	0x00b71b00
 8002304:	08002918 	.word	0x08002918
 8002308:	08002928 	.word	0x08002928
 800230c:	003d0900 	.word	0x003d0900
 8002310:	007a1200 	.word	0x007a1200

08002314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002318:	4b02      	ldr	r3, [pc, #8]	@ (8002324 <HAL_RCC_GetHCLKFreq+0x10>)
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr
 8002324:	20000008 	.word	0x20000008

08002328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800232c:	f7ff fff2 	bl	8002314 <HAL_RCC_GetHCLKFreq>
 8002330:	4602      	mov	r2, r0
 8002332:	4b05      	ldr	r3, [pc, #20]	@ (8002348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	0a1b      	lsrs	r3, r3, #8
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	4903      	ldr	r1, [pc, #12]	@ (800234c <HAL_RCC_GetPCLK1Freq+0x24>)
 800233e:	5ccb      	ldrb	r3, [r1, r3]
 8002340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002344:	4618      	mov	r0, r3
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000
 800234c:	08002910 	.word	0x08002910

08002350 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002358:	4b0a      	ldr	r3, [pc, #40]	@ (8002384 <RCC_Delay+0x34>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a0a      	ldr	r2, [pc, #40]	@ (8002388 <RCC_Delay+0x38>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	0a5b      	lsrs	r3, r3, #9
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	fb02 f303 	mul.w	r3, r2, r3
 800236a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800236c:	bf00      	nop
  }
  while (Delay --);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	1e5a      	subs	r2, r3, #1
 8002372:	60fa      	str	r2, [r7, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f9      	bne.n	800236c <RCC_Delay+0x1c>
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	20000008 	.word	0x20000008
 8002388:	10624dd3 	.word	0x10624dd3

0800238c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e076      	b.n	800248c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d108      	bne.n	80023b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023ae:	d009      	beq.n	80023c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	61da      	str	r2, [r3, #28]
 80023b6:	e005      	b.n	80023c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d106      	bne.n	80023e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7fe f9dc 	bl	800079c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	431a      	orrs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002448:	ea42 0103 	orr.w	r1, r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002450:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	0c1a      	lsrs	r2, r3, #16
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f002 0204 	and.w	r2, r2, #4
 800246a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	69da      	ldr	r2, [r3, #28]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800247a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	4613      	mov	r3, r2
 80024a2:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024a4:	f7fe fa88 	bl	80009b8 <HAL_GetTick>
 80024a8:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d001      	beq.n	80024be <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80024ba:	2302      	movs	r3, #2
 80024bc:	e12a      	b.n	8002714 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d002      	beq.n	80024ca <HAL_SPI_Transmit+0x36>
 80024c4:	88fb      	ldrh	r3, [r7, #6]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e122      	b.n	8002714 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_SPI_Transmit+0x48>
 80024d8:	2302      	movs	r3, #2
 80024da:	e11b      	b.n	8002714 <HAL_SPI_Transmit+0x280>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2203      	movs	r2, #3
 80024e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	88fa      	ldrh	r2, [r7, #6]
 80024fc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	88fa      	ldrh	r2, [r7, #6]
 8002502:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800252a:	d10f      	bne.n	800254c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800253a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800254a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002556:	2b40      	cmp	r3, #64	@ 0x40
 8002558:	d007      	beq.n	800256a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002568:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002572:	d152      	bne.n	800261a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d002      	beq.n	8002582 <HAL_SPI_Transmit+0xee>
 800257c:	8b7b      	ldrh	r3, [r7, #26]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d145      	bne.n	800260e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	881a      	ldrh	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	1c9a      	adds	r2, r3, #2
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800259c:	b29b      	uxth	r3, r3
 800259e:	3b01      	subs	r3, #1
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025a6:	e032      	b.n	800260e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d112      	bne.n	80025dc <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	881a      	ldrh	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	1c9a      	adds	r2, r3, #2
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80025da:	e018      	b.n	800260e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025dc:	f7fe f9ec 	bl	80009b8 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d803      	bhi.n	80025f4 <HAL_SPI_Transmit+0x160>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f2:	d102      	bne.n	80025fa <HAL_SPI_Transmit+0x166>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d109      	bne.n	800260e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e082      	b.n	8002714 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002612:	b29b      	uxth	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1c7      	bne.n	80025a8 <HAL_SPI_Transmit+0x114>
 8002618:	e053      	b.n	80026c2 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d002      	beq.n	8002628 <HAL_SPI_Transmit+0x194>
 8002622:	8b7b      	ldrh	r3, [r7, #26]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d147      	bne.n	80026b8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	330c      	adds	r3, #12
 8002632:	7812      	ldrb	r2, [r2, #0]
 8002634:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002644:	b29b      	uxth	r3, r3
 8002646:	3b01      	subs	r3, #1
 8002648:	b29a      	uxth	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800264e:	e033      	b.n	80026b8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b02      	cmp	r3, #2
 800265c:	d113      	bne.n	8002686 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	330c      	adds	r3, #12
 8002668:	7812      	ldrb	r2, [r2, #0]
 800266a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002670:	1c5a      	adds	r2, r3, #1
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800267a:	b29b      	uxth	r3, r3
 800267c:	3b01      	subs	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002684:	e018      	b.n	80026b8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002686:	f7fe f997 	bl	80009b8 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d803      	bhi.n	800269e <HAL_SPI_Transmit+0x20a>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269c:	d102      	bne.n	80026a4 <HAL_SPI_Transmit+0x210>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d109      	bne.n	80026b8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e02d      	b.n	8002714 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026bc:	b29b      	uxth	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1c6      	bne.n	8002650 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	6839      	ldr	r1, [r7, #0]
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 f8b0 	bl	800282c <SPI_EndRxTxTransaction>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2220      	movs	r2, #32
 80026d6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10a      	bne.n	80026f6 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002712:	2300      	movs	r3, #0
  }
}
 8002714:	4618      	mov	r0, r3
 8002716:	3720      	adds	r7, #32
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b088      	sub	sp, #32
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	4613      	mov	r3, r2
 800272a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800272c:	f7fe f944 	bl	80009b8 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	4413      	add	r3, r2
 800273a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800273c:	f7fe f93c 	bl	80009b8 <HAL_GetTick>
 8002740:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002742:	4b39      	ldr	r3, [pc, #228]	@ (8002828 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	015b      	lsls	r3, r3, #5
 8002748:	0d1b      	lsrs	r3, r3, #20
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	fb02 f303 	mul.w	r3, r2, r3
 8002750:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002752:	e054      	b.n	80027fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275a:	d050      	beq.n	80027fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800275c:	f7fe f92c 	bl	80009b8 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	429a      	cmp	r2, r3
 800276a:	d902      	bls.n	8002772 <SPI_WaitFlagStateUntilTimeout+0x56>
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d13d      	bne.n	80027ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002780:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800278a:	d111      	bne.n	80027b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002794:	d004      	beq.n	80027a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800279e:	d107      	bne.n	80027b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027b8:	d10f      	bne.n	80027da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e017      	b.n	800281e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	4013      	ands	r3, r2
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	429a      	cmp	r2, r3
 800280c:	bf0c      	ite	eq
 800280e:	2301      	moveq	r3, #1
 8002810:	2300      	movne	r3, #0
 8002812:	b2db      	uxtb	r3, r3
 8002814:	461a      	mov	r2, r3
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	429a      	cmp	r2, r3
 800281a:	d19b      	bne.n	8002754 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3720      	adds	r7, #32
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000008 	.word	0x20000008

0800282c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af02      	add	r7, sp, #8
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2201      	movs	r2, #1
 8002840:	2102      	movs	r1, #2
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f7ff ff6a 	bl	800271c <SPI_WaitFlagStateUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d007      	beq.n	800285e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002852:	f043 0220 	orr.w	r2, r3, #32
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e013      	b.n	8002886 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2200      	movs	r2, #0
 8002866:	2180      	movs	r1, #128	@ 0x80
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f7ff ff57 	bl	800271c <SPI_WaitFlagStateUntilTimeout>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d007      	beq.n	8002884 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002878:	f043 0220 	orr.w	r2, r3, #32
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e000      	b.n	8002886 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <memset>:
 800288e:	4603      	mov	r3, r0
 8002890:	4402      	add	r2, r0
 8002892:	4293      	cmp	r3, r2
 8002894:	d100      	bne.n	8002898 <memset+0xa>
 8002896:	4770      	bx	lr
 8002898:	f803 1b01 	strb.w	r1, [r3], #1
 800289c:	e7f9      	b.n	8002892 <memset+0x4>
	...

080028a0 <__libc_init_array>:
 80028a0:	b570      	push	{r4, r5, r6, lr}
 80028a2:	2600      	movs	r6, #0
 80028a4:	4d0c      	ldr	r5, [pc, #48]	@ (80028d8 <__libc_init_array+0x38>)
 80028a6:	4c0d      	ldr	r4, [pc, #52]	@ (80028dc <__libc_init_array+0x3c>)
 80028a8:	1b64      	subs	r4, r4, r5
 80028aa:	10a4      	asrs	r4, r4, #2
 80028ac:	42a6      	cmp	r6, r4
 80028ae:	d109      	bne.n	80028c4 <__libc_init_array+0x24>
 80028b0:	f000 f81a 	bl	80028e8 <_init>
 80028b4:	2600      	movs	r6, #0
 80028b6:	4d0a      	ldr	r5, [pc, #40]	@ (80028e0 <__libc_init_array+0x40>)
 80028b8:	4c0a      	ldr	r4, [pc, #40]	@ (80028e4 <__libc_init_array+0x44>)
 80028ba:	1b64      	subs	r4, r4, r5
 80028bc:	10a4      	asrs	r4, r4, #2
 80028be:	42a6      	cmp	r6, r4
 80028c0:	d105      	bne.n	80028ce <__libc_init_array+0x2e>
 80028c2:	bd70      	pop	{r4, r5, r6, pc}
 80028c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80028c8:	4798      	blx	r3
 80028ca:	3601      	adds	r6, #1
 80028cc:	e7ee      	b.n	80028ac <__libc_init_array+0xc>
 80028ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80028d2:	4798      	blx	r3
 80028d4:	3601      	adds	r6, #1
 80028d6:	e7f2      	b.n	80028be <__libc_init_array+0x1e>
 80028d8:	0800292c 	.word	0x0800292c
 80028dc:	0800292c 	.word	0x0800292c
 80028e0:	0800292c 	.word	0x0800292c
 80028e4:	08002930 	.word	0x08002930

080028e8 <_init>:
 80028e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ea:	bf00      	nop
 80028ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ee:	bc08      	pop	{r3}
 80028f0:	469e      	mov	lr, r3
 80028f2:	4770      	bx	lr

080028f4 <_fini>:
 80028f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f6:	bf00      	nop
 80028f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028fa:	bc08      	pop	{r3}
 80028fc:	469e      	mov	lr, r3
 80028fe:	4770      	bx	lr
